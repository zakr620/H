print("loading the latest gui")
--[=[
MADE BY RICHNESS 

SHOULD ONLY BE USED BY TEKKIT

IF YOU ARE NOT TEKKIT AND HAVE FOUND THIS LIBRARY YOU ARE A SCUMBAG LITTLE IDIOT
AND I HOPE YOU DIE :]
]=]--

Rise = {
	Instances = {},
	DisableDrag = false
}

Theme = {
	Default = {
		Dark = Color3.fromRGB(15, 15, 15),
		Light = Color3.fromRGB(255, 255, 255)
	}
}



-- Declarations
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local CoreGui = RunService:IsStudio() and LocalPlayer:WaitForChild("PlayerGui") or game:GetService("CoreGui")
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Helpers
do

	Object = {
		New = function(Ins, Props, Child)
			local Obj = Instance.new(Ins)

			for Name, Value in pairs(Props or {}) do
				Obj[Name] = Value

				if typeof(Value) == "Color3" then
					for themeName, themeColor in pairs(Theme.Default) do
						if Value == themeColor then
							Rise.Instances[themeName] = Rise.Instances[themeName] or {}
							Rise.Instances[themeName][Name] = Rise.Instances[themeName][Name] or {}

							table.insert(Rise.Instances[themeName][Name], Obj)
							break
						end
					end
				end
			end

			for _, Module in pairs(Child or {}) do
				Module.Parent = Obj
			end

			return Obj
		end
	}
	
	function SetTheme(ThemeName, Color)
		Theme.Default[ThemeName] = Color

		if not Rise.Instances[ThemeName] then
			return
		end

		for Property, Instances in pairs(Rise.Instances[ThemeName]) do
			local validInstances = {}

			for _, Instance in ipairs(Instances) do
				if Instance.Parent and not (Instance.Name == "Button" and Instance.Parent.Name == "ColorPicker") then
					Tween({
						Instance
					}, {
						{Goal = {[Property] = Color}, Duration = 0.25}
					})
					table.insert(validInstances, Instance)
				end
			end

			Rise.Instances[ThemeName][Property] = validInstances
		end
	end
	
	-- "Pasted from flunt :] " --
	DrawTriangle = function(v1, v2, v3, p0, p1)
		local MTREL = "Glass"
		local wedgeguid = "BlurMesh"

		local acos, max, pi, sqrt = math.acos, math.max, math.pi, math.sqrt
		local sz = 0.2
		local s1 = (v1 - v2).magnitude
		local s2 = (v2 - v3).magnitude
		local s3 = (v3 - v1).magnitude
		local smax = max(s1, s2, s3)
		local A, B, C
		if s1 == smax then
			A, B, C = v1, v2, v3
		elseif s2 == smax then
			A, B, C = v2, v3, v1
		elseif s3 == smax then
			A, B, C = v3, v1, v2
		end

		local para = ( (B-A).x*(C-A).x + (B-A).y*(C-A).y + (B-A).z*(C-A).z ) / (A-B).magnitude
		local perp = sqrt((C-A).magnitude^2 - para*para)
		local dif_para = (A - B).magnitude - para

		local st = CFrame.new(B, A)
		local za = CFrame.Angles(pi/2,0,0)

		local cf0 = st

		local Top_Look = (cf0 * za).lookVector
		local Mid_Point = A + CFrame.new(A, B).lookVector * para
		local Needed_Look = CFrame.new(Mid_Point, C).lookVector
		local dot = Top_Look.x*Needed_Look.x + Top_Look.y*Needed_Look.y + Top_Look.z*Needed_Look.z

		local ac = CFrame.Angles(0, 0, acos(dot))

		cf0 = cf0 * ac
		if ((cf0 * za).lookVector - Needed_Look).magnitude > 0.01 then
			cf0 = cf0 * CFrame.Angles(0, 0, -2*acos(dot))
		end
		cf0 = cf0 * CFrame.new(0, perp/2, -(dif_para + para/2))

		local cf1 = st * ac * CFrame.Angles(0, pi, 0)
		if ((cf1 * za).lookVector - Needed_Look).magnitude > 0.01 then
			cf1 = cf1 * CFrame.Angles(0, 0, 2*acos(dot))
		end
		cf1 = cf1 * CFrame.new(0, perp/2, dif_para/2)

		if not p0 then
			p0 = Instance.new('Part')
			p0.FormFactor = 'Custom'
			p0.TopSurface = 0
			p0.BottomSurface = 0
			p0.Anchored = true
			p0.CanCollide = false
			p0.CastShadow = false
			p0.Material = MTREL
			p0.Size = Vector3.new(sz, sz, sz)
			p0.Name = HttpService:GenerateGUID(true)
			local mesh = Instance.new('SpecialMesh', p0)
			mesh.MeshType = 2
			mesh.Name = wedgeguid
		end

		local mesh0 = p0:FindFirstChild(wedgeguid)
		if mesh0 then
			mesh0.Scale = Vector3.new(0, perp/sz, para/sz)
		end
		p0.CFrame = cf0

		if not p1 then
			p1 = p0:clone()
		end

		local mesh1 = p1:FindFirstChild(wedgeguid)
		if mesh1 then
			mesh1.Scale = Vector3.new(0, perp/sz, dif_para/sz)
		end
		p1.CFrame = cf1

		return p0, p1
	end

	DrawQuad = function(v1, v2, v3, v4, parts)
		parts[1], parts[2] = DrawTriangle(v1, v2, v3, parts[1], parts[2])
		parts[3], parts[4] = DrawTriangle(v3, v2, v4, parts[3], parts[4])
	end

	local Connections = {}
	local Parts = {}

	Blurify = {
		Add = function(a1)
			local Frame = Object.New("Frame", {
				AnchorPoint = Vector2.new(0.5, 0.5),
				Position = UDim2.new(0.5, 0, 0.5, 0),
				Size = UDim2.new(0.97, 0, 0.97, 0),
				BackgroundTransparency = 1,
				Parent = a1
			})
			
			local parts = {}

			local function IsVisible(instance)
				while instance do
					if instance:IsA("GuiObject") then
						if not instance.Visible then
							return false
						end
					elseif instance:IsA("ScreenGui") then
						if not instance.Enabled then
							return false
						end
						break
					end
					instance = instance.Parent
				end
				return true
			end

			local function UpdateOrientation(fetchProps)
				local properties = {
					Transparency = 0.98;
					BrickColor = BrickColor.new('Institutional white');
				}

				local zIndex = 1 - 0.05*Frame.ZIndex

				local tl, br = Frame.AbsolutePosition, Frame.AbsolutePosition + Frame.AbsoluteSize
				local tr, bl = Vector2.new(br.x, tl.y), Vector2.new(tl.x, br.y)
				do
					local rot = Frame.Rotation
					if rot ~= 0 and rot%180 ~= 0 then
						local mid = tl:lerp(br, 0.5)
						local s, c = math.sin(math.rad(rot)), math.cos(math.rad(rot))
						tl = Vector2.new(c*(tl.x - mid.x) - s*(tl.y - mid.y), s*(tl.x - mid.x) + c*(tl.y - mid.y)) + mid
						tr = Vector2.new(c*(tr.x - mid.x) - s*(tr.y - mid.y), s*(tr.x - mid.x) + c*(tr.y - mid.y)) + mid
						bl = Vector2.new(c*(bl.x - mid.x) - s*(bl.y - mid.y), s*(bl.x - mid.x) + c*(bl.y - mid.y)) + mid
						br = Vector2.new(c*(br.x - mid.x) - s*(br.y - mid.y), s*(br.x - mid.x) + c*(br.y - mid.y)) + mid
					end
				end
				DrawQuad(
					Camera:ScreenPointToRay(tl.x, tl.y, zIndex).Origin, 
					Camera:ScreenPointToRay(tr.x, tr.y, zIndex).Origin, 
					Camera:ScreenPointToRay(bl.x, bl.y, zIndex).Origin, 
					Camera:ScreenPointToRay(br.x, br.y, zIndex).Origin, 
					parts
				)
				if fetchProps then
					for _, pt in pairs(parts) do
						pt.Parent = Camera
					end
					for propName, propValue in pairs(properties) do
						for _, pt in pairs(parts) do
							pt[propName] = propValue
						end
					end
				end
			end

			if Parts[Frame] then
				for _, part in pairs(Parts[Frame]) do
					part:Destroy()
				end
				Parts[Frame] = nil
			end
			
			if Connections[Frame] then
				Connections[Frame]:Disconnect()
				Connections[Frame] = nil
			end

			UpdateOrientation(true)
			Parts[Frame] = parts
			Connections[Frame] = game:GetService("RunService").RenderStepped:Connect(UpdateOrientation)
		end,

		Remove = function(Frame)
			local connection = Connections[Frame]
			if connection then
				connection:Disconnect()
				Connections[Frame] = nil
			end

			local frameParts = Parts[Frame]
			if frameParts then
				for _, part in pairs(frameParts) do
					part:Destroy()
				end
				Parts[Frame] = nil
			end
		end,
	}

	Settings = function(defaults, options)
		options = options or {}
		local merged = {}

		for k, v in pairs(defaults) do
			merged[k] = v
		end

		for k, v in pairs(options) do
			if defaults[k] ~= nil then
				merged[k] = v
			end
		end

		return merged
	end

	Tween = function(Objects, Options)
		assert(type(Objects) == "table", "Objects must be a table")
		assert(type(Options) == "table", "Options must be a table")

		for i, object in ipairs(Objects) do
			local option = Options[i]
			assert(object, "Each object must be a valid instance")
			assert(option, "Each object must have corresponding options")

			local goal = option.Goal or {}
			local duration = option.Duration or 0.15
			local callback = option.Callback or function() end
			local easingStyle = option.EasingStyle or Enum.EasingStyle.Sine
			local easingDirection = option.EasingDirection or Enum.EasingDirection.Out
			local tweenInfo = TweenInfo.new(
				duration,
				easingStyle,
				easingDirection
			)

			local tween = TweenService:Create(object, tweenInfo, goal)
			
			tween:Play()
			tween.Completed:Once(callback)
		end
	end

	Dragify = function(DraggableFrame, FrameThatNeedsToBeVisible)
		assert(DraggableFrame:IsA("GuiObject"), "DraggableFrame must be a GuiObject")
		local dragging = false
		local dragInput, mousePosition, framePosition

		local function updateDrag(input)
			local delta = input.Position - mousePosition
			local newPosition = UDim2.new(
				framePosition.X.Scale,
				framePosition.X.Offset + delta.X,
				framePosition.Y.Scale,
				framePosition.Y.Offset + delta.Y
			)
			Tween({DraggableFrame}, {
				{Goal = {Position = newPosition}, Duration = 0.05, EasingStyle = Enum.EasingStyle.Exponential, EasingDirection = Enum.EasingDirection.Out}
			})
		end

		DraggableFrame.InputBegan:Connect(function(input)
			if Rise.DisableDrag then return end

			if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) 
				and FrameThatNeedsToBeVisible.Visible then
				dragging = true
				mousePosition = input.Position
				framePosition = DraggableFrame.Position

				if UserInputService.TouchEnabled then
					UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
					UserInputService.ModalEnabled = true
					Camera.CameraType = Enum.CameraType.Scriptable
				end

				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
						if UserInputService.TouchEnabled then
							UserInputService.MouseBehavior = Enum.MouseBehavior.Default
							UserInputService.ModalEnabled = false
							Camera.CameraType = Enum.CameraType.Custom
						end
					end
				end)
			end
		end)

		DraggableFrame.InputChanged:Connect(function(input)
			if Rise.DisableDrag then return end

			if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) 
				and FrameThatNeedsToBeVisible.Visible then
				dragInput = input
			end
		end)

		UserInputService.InputChanged:Connect(function(input)
			if Rise.DisableDrag then return end

			if input == dragInput and dragging and FrameThatNeedsToBeVisible.Visible then
				updateDrag(input)
			end
		end)
	end

	Cursify = function(BoundsFrame, CursorId)
		assert(BoundsFrame and CursorId, "BoundsFrame and CursorId are required")
		assert(BoundsFrame:IsA("GuiObject"), "BoundsFrame must be a GuiObject")
		assert(type(CursorId) == "string" or type(CursorId) == "number", "CursorId must be a string or number")

		local cursor = Object.New("ImageLabel", {
			Name = "CustomCursor-" .. CursorId,
			Size = UDim2.new(0, 20, 0, 20),
			BackgroundTransparency = 1,
			Image = "rbxassetid://" .. CursorId,
			Parent = BoundsFrame.Parent,
			ZIndex = 2147483647
		})

		RunService.RenderStepped:Connect(function()
			local framePos = BoundsFrame.AbsolutePosition
			local frameSize = BoundsFrame.AbsoluteSize
			local isInFrame = Mouse.X >= framePos.X and Mouse.X <= framePos.X + frameSize.X and
				Mouse.Y >= framePos.Y and Mouse.Y <= framePos.Y + frameSize.Y and
				BoundsFrame.Visible

			Tween({cursor}, {
				{Goal = {Visible = isInFrame, BackgroundTransparency = isInFrame and 0 or 1}, Duration = 0.1}
			})

			UserInputService.MouseIconEnabled = not isInFrame

			if isInFrame then
				cursor.Position = UDim2.new(
					0, Mouse.X - framePos.X - 2,
					0, Mouse.Y - framePos.Y - 2
				)
			end
		end)
	end
	
	Input = function(Frame, Callbacks)
		Callbacks = Callbacks or {}
		local HoverOff = Callbacks.HoverOff or function() end
		local HoverOn = Callbacks.HoverOn or function() end
		local Click = Callbacks.Click or function() end
		local UnClick = Callbacks.UnClick or function() end
		local Dragging = Callbacks.Dragging or function() end
		local UnDragging = Callbacks.EndDragging or function() end

		local AllowDragging = false

		Frame.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				AllowDragging = true
				Click(Input)
			end
		end)

		Frame.InputEnded:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				AllowDragging = false
				UnClick()
				UnDragging()
			end
		end)

		Frame.InputChanged:Connect(function(Input)
			if AllowDragging then
				Dragging(Input)
			end
		end)

		Frame.MouseEnter:Connect(HoverOn)
		Frame.MouseLeave:Connect(HoverOff)
	end
end

function Rise:Window(Options)
	Options = Settings({
		Title = "Rise UI Demo",
		SubTitle = "Rise | Lib",
		YouTubeLink = "https://www.youtube.com/@tekkit9070",
		DiscordLink = "https://discord.gg/CXFxhXShwt",
		MinimizeKey = "RightControl",
		Theme = "Light",
		Premium = false
	}, Options)
	
	local Window = {
		CurrentTab = nil,
		Enabled = true,
		Premium = Options.Premium or false
	}
	
	Window.Interface = Object.New("ScreenGui", {
	    IgnoreGuiInset = true,
	    ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets,
	    Name = "Rise | UI (Journe-Horizontal)",
	    ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
		ResetOnSpawn = false,
		Parent = RunService:IsStudio() and LocalPlayer.PlayerGui or CoreGui
	}, {
	    Object.New("Frame", {
	        BorderSizePixel = 0,
	        BackgroundColor3 = Theme.Default.Dark,
	        AnchorPoint = Vector2.new(0.5, 0.5),
			Size = UDim2.new(0, 667, 0, 480),
	        Position = UDim2.new(0.5, 0, 0.5, 0),
	        BorderColor3 = Color3.fromRGB(0, 0, 0),
	        Name = "Base",
			BackgroundTransparency = 0.05,
			ClipsDescendants = true
	    }, {
	        Object.New("UICorner", {
	            Name = "Corner",
	            CornerRadius = UDim.new(0, 6),
	        }),
	        Object.New("UIStroke", {
	            Transparency = 0.9,
	            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
	            Name = "Stroke",
	            Color = Theme.Default.Light,
	        }),
	        Object.New("Frame", {
	            BorderSizePixel = 0,
	            BackgroundColor3 = Theme.Default.Light,
	            Size = UDim2.new(0.325, 0, 1, -35),
	            Position = UDim2.new(0, 0, 0, 0),
	            BorderColor3 = Color3.fromRGB(0, 0, 0),
	            Name = "Sidebar",
				BackgroundTransparency = 1,
	        }, {
	            Object.New("Frame", {
	                BorderSizePixel = 0,
	                BackgroundColor3 = Theme.Default.Light,
	                AnchorPoint = Vector2.new(1, 0),
	                Size = UDim2.new(0, 1, 1, 0),
	                Position = UDim2.new(1, 0, 0, 0),
	                BorderColor3 = Color3.fromRGB(0, 0, 0),
	                Name = "Divider",
	                BackgroundTransparency = 0.9,
	            }),
	            Object.New("Frame", {
	                BorderSizePixel = 0,
	                BackgroundColor3 = Theme.Default.Light,
	                Size = UDim2.new(1, 0, 0, 46),
	                BorderColor3 = Color3.fromRGB(0, 0, 0),
	                Name = "Information",
	                BackgroundTransparency = 1,
	            }, {
	                Object.New("Frame", {
	                    BorderSizePixel = 0,
	                    BackgroundColor3 = Theme.Default.Light,
	                    AnchorPoint = Vector2.new(0, 1),
	                    Size = UDim2.new(1, 0, 0, 1),
	                    Position = UDim2.new(0, 0, 1, 0),
	                    BorderColor3 = Color3.fromRGB(0, 0, 0),
	                    Name = "Divider",
	                    BackgroundTransparency = 0.9,
	                }),
	                Object.New("Frame", {
	                    BorderSizePixel = 0,
	                    BackgroundColor3 = Theme.Default.Light,
	                    Size = UDim2.new(1, 0, 1, 0),
	                    BorderColor3 = Color3.fromRGB(0, 0, 0),
	                    Name = "Information_Container",
	                    BackgroundTransparency = 1,
	                }, {
	                    Object.New("UIPadding", {
	                        PaddingTop = UDim.new(0, 10),
	                        PaddingRight = UDim.new(0, 22),
	                        Name = "Padding",
	                        PaddingLeft = UDim.new(0, 10),
	                        PaddingBottom = UDim.new(0, 10),
	                    }),
	                    Object.New("Frame", {
	                        BorderSizePixel = 0,
	                        BackgroundColor3 = Theme.Default.Light,
	                        Size = UDim2.new(1, 0, 1, 0),
	                        BorderColor3 = Color3.fromRGB(0, 0, 0),
	                        Name = "Container",
	                        BackgroundTransparency = 1,
	                    }, {
	                        Object.New("TextLabel", {
	                            TextTruncate = Enum.TextTruncate.SplitWord,
	                            BorderSizePixel = 0,
	                            TextXAlignment = Enum.TextXAlignment.Left,
	                            TextTransparency = 0.1,
	                            TextYAlignment = Enum.TextYAlignment.Top,
	                            BackgroundColor3 = Theme.Default.Light,
	                            TextSize = 13,
	                            FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),
	                            TextColor3 = Theme.Default.Light,
	                            BackgroundTransparency = 1,
	                            RichText = true,
	                            Size = UDim2.new(1, -20, 0, 0),
	                            BorderColor3 = Color3.fromRGB(0, 0, 0),
	                            Text = Options.Title,
	                            AutomaticSize = Enum.AutomaticSize.Y,
	                            Name = "Title",
	                        }),
	                        Object.New("TextLabel", {
	                            TextTruncate = Enum.TextTruncate.SplitWord,
	                            BorderSizePixel = 0,
	                            TextXAlignment = Enum.TextXAlignment.Left,
	                            TextTransparency = 0.7,
	                            TextYAlignment = Enum.TextYAlignment.Top,
	                            BackgroundColor3 = Theme.Default.Light,
	                            TextSize = 9,
	                            FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
	                            TextColor3 = Theme.Default.Light,
	                            BackgroundTransparency = 1,
	                            RichText = true,
	                            Size = UDim2.new(1, -20, 0, 0),
	                            BorderColor3 = Color3.fromRGB(0, 0, 0),
	                            Text = Options.SubTitle,
	                            LayoutOrder = 1,
	                            AutomaticSize = Enum.AutomaticSize.Y,
	                            Name = "Subtitle",
	                        }),
	                        Object.New("UIListLayout", {
	                            Padding = UDim.new(0, 3),
	                            VerticalAlignment = Enum.VerticalAlignment.Center,
	                            SortOrder = Enum.SortOrder.LayoutOrder,
	                            Name = "List",
	                        }),
	                    }),
	                }),
	            }),
				Object.New("Frame", {
					Name = "Navigation",
					Size = UDim2.new(1, 0, 1, -46),
					Position = UDim2.new(0, 0, 0, 46),
					BackgroundTransparency = 1,
					BackgroundColor3 = Theme.Default.Light,
					BorderSizePixel = 0,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					ClipsDescendants = true
				}, {
					Object.New("UIPadding", {
						Name = "Padding",
						PaddingTop = UDim.new(0, 20),
						PaddingRight = UDim.new(0, 5),
						PaddingLeft = UDim.new(0, 5),
					}),
					Object.New("Frame", {
						Name = "TabButtons",
						Size = UDim2.new(1, 0, 1, -20),
						BackgroundTransparency = 1,
						BackgroundColor3 = Theme.Default.Light,
						BorderSizePixel = 0,
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						ClipsDescendants = true
					}, {
						Object.New("ScrollingFrame", {
							Name = "TabButtons_Container",
							Size = UDim2.new(1, 0, 1, 0),
							BackgroundTransparency = 1,
							BackgroundColor3 = Theme.Default.Light,
							BorderSizePixel = 0,
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							CanvasSize = UDim2.new(0, 0, 0, 0),
							AutomaticCanvasSize = Enum.AutomaticSize.Y,
							ScrollBarThickness = 1,
							ScrollBarImageTransparency = 0.8,
							TopImage = "",
							BottomImage = "",
						}, {
							Object.New("UIPadding", {
								Name = "Padding",
								PaddingBottom = UDim.new(0, 15),
							}),
							Object.New("UIListLayout", {
								Name = "List",
								HorizontalAlignment = Enum.HorizontalAlignment.Center,
								SortOrder = Enum.SortOrder.LayoutOrder,
								Padding = UDim.new(0, 15),
							}),
						}),
					}),
				})
	        }),
			Object.New("Frame", {
				Name = "BottomBar",
				AnchorPoint = Vector2.new(0, 1),
				Size = UDim2.new(1, 0, 0, 35),
				Position = UDim2.new(0, 0, 1, 0),
				BackgroundTransparency = 1,
				BackgroundColor3 = Theme.Default.Light,
				BorderSizePixel = 0,
				BorderColor3 = Color3.fromRGB(0, 0, 0),
			}, {
				Object.New("Frame", {
					Name = "Divider",
					Size = UDim2.new(1, 0, 0, 1),
					BackgroundTransparency = 0.9,
					BackgroundColor3 = Theme.Default.Light,
					BorderSizePixel = 0,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
				}),
				Object.New("ImageLabel", {
					Name = "VisibleIcon",
					AnchorPoint = Vector2.new(1, 0.5),
					Size = UDim2.new(0, 15, 0, 15),
					Position = UDim2.new(1, -10, 0.5, 0),
					BackgroundTransparency = 1,
					BackgroundColor3 = Theme.Default.Light,
					Image = "rbxassetid://134327847638307",
					ImageTransparency = 0.5,
					BorderSizePixel = 0,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					ImageColor3 = Theme.Default.Light
				}),
				Object.New("ImageLabel", {
					Name = "Discord",
					AnchorPoint = Vector2.new(1, 0.5),
					Size = UDim2.new(0, 15, 0, 15),
					Position = UDim2.new(1, -40, 0.5, 0),
					BackgroundTransparency = 1,
					BackgroundColor3 = Theme.Default.Light,
					Image = "rbxassetid://93588053073757",
					ImageTransparency = 0.5,
					BorderSizePixel = 0,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					ImageColor3 = Theme.Default.Light
				}),
				Object.New("ImageLabel", {
					Name = "Youtube",
					AnchorPoint = Vector2.new(1, 0.5),
					Size = UDim2.new(0, 15, 0, 15),
					Position = UDim2.new(1, -70, 0.5, 0),
					BackgroundTransparency = 1,
					BackgroundColor3 = Theme.Default.Light,
					Image = "rbxassetid://77851790097851",
					ImageTransparency = 0.5,
					BorderSizePixel = 0,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					ImageColor3 = Theme.Default.Light
				}),
			}),
			Object.New("Frame", {
				Name = "Main",
				AnchorPoint = Vector2.new(1, 0),
				Size = UDim2.new(0, 450, 1, -35),
				Position = UDim2.new(1, 0, 0, 0),
				BackgroundTransparency = 1,
				BackgroundColor3 = Theme.Default.Light,
				BorderSizePixel = 0,
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				ClipsDescendants = true
			}, {
				Object.New("Frame", {
					Name = "Topbar",
					Size = UDim2.new(1, 0, 0, 46),
					BackgroundTransparency = 1,
					BackgroundColor3 = Theme.Default.Light,
					BorderSizePixel = 0,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
				}, {
					Object.New("Frame", {
						Name = "Divider",
						Size = UDim2.new(1, 0, 0, 1),
						AnchorPoint = Vector2.new(0, 1),
						Position = UDim2.new(0, 0, 1, 0),
						BackgroundTransparency = 0.9,
						BackgroundColor3 = Theme.Default.Light,
						BorderSizePixel = 0,
						BorderColor3 = Color3.fromRGB(0, 0, 0),
					}),
					Object.New("Frame", {
						Name = "Container",
						Size = UDim2.new(1, 0, 1, 0),
						BackgroundTransparency = 1,
						BackgroundColor3 = Theme.Default.Light,
						BorderSizePixel = 0,
						BorderColor3 = Color3.fromRGB(0, 0, 0),
					}, {
						Object.New("UIPadding", {
							PaddingRight = UDim.new(0, 20),
							PaddingLeft = UDim.new(0, 20),
						}),
						Object.New("TextLabel", {
							Name = "CurrentTab",
							Text = "Main",
							TextSize = 11,
							FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
							TextColor3 = Theme.Default.Light,
							TextTransparency = 0.5,
							TextXAlignment = Enum.TextXAlignment.Left,
							TextYAlignment = Enum.TextYAlignment.Top,
							BackgroundTransparency = 1,
							Size = UDim2.new(0.9, 0, 0, 0),
							AnchorPoint = Vector2.new(0, 0.5),
							Position = UDim2.new(0, 0, 0.5, 0),
							RichText = true,
							AutomaticSize = Enum.AutomaticSize.Y,
							BorderSizePixel = 0,
							BackgroundColor3 = Theme.Default.Light,
							BorderColor3 = Color3.fromRGB(0, 0, 0),
						}),
					}),
				}),
				Object.New("Frame", {
					Name = "Tabs",
					Size = UDim2.new(1, 0, 1, -46),
					Position = UDim2.new(0, 0, 0, 46),
					BackgroundTransparency = 1,
					BackgroundColor3 = Theme.Default.Light,
					BorderSizePixel = 0,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					ClipsDescendants = true,
				}, {
					Object.New("UIPadding", {
						Name = "Padding",
						PaddingTop = UDim.new(0, 10),
						PaddingRight = UDim.new(0, 5),
						PaddingBottom = UDim.new(0, 10),
					}),
				}),
			})
	    }),
	})
	
	Window.Notifications = Object.New("Frame", {
		Parent = Window.Interface.Base,
		ZIndex = 2,
		BorderSizePixel = 0,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		AnchorPoint = Vector2.new(1, 0),
		Size = UDim2.new(0, 215, 1, -35),
		Position = UDim2.new(1, 0, 0, 0),
		BorderColor3 = Color3.fromRGB(0, 0, 0),
		BackgroundTransparency = 1,
		Name = "Notifications",
	}, {
		Object.New("UIPadding", {
			PaddingTop = UDim.new(0, 10),
			PaddingRight = UDim.new(0, 10),
			PaddingLeft = UDim.new(0, 10),
			PaddingBottom = UDim.new(0, 10),
			Name = "Padding",
		}),
		Object.New("UIListLayout", {
			Name = "List",
			HorizontalAlignment = Enum.HorizontalAlignment.Right,
			VerticalAlignment = Enum.VerticalAlignment.Bottom,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 10),
		})
	})
	
	Blurify.Add(Window.Interface.Base)
	Dragify(Window.Interface.Base, Window.Interface.Base)
	-- Borken junk Cursify(Window.Interface.Base, 128944823463663)
	
	Input(Window.Interface.Base.BottomBar.VisibleIcon, {
		HoverOff = function()
			Tween({
				Window.Interface.Base.BottomBar.VisibleIcon,
			}, {
				{Goal = { ImageTransparency = 0.5 }, Duration = 0.5}
			})
		end,
		HoverOn = function()
			Tween({
				Window.Interface.Base.BottomBar.VisibleIcon,
			}, {
				{Goal = { ImageTransparency = 0 }, Duration = 0.5}
			})
		end,
		Click = function()
			Window.Enabled = not Window.Enabled
			
			if Window.Enabled then
				Tween({
					Window.Interface.Base,
					Window.Interface.Base.Sidebar.Information.Information_Container.Padding
				}, {
					{ Goal = { Size = UDim2.new(0, 667, 0, 480) }, Duration = 0.5, Callback = function()
						print("opening")	
					end },
					{ Goal = { PaddingLeft = UDim.new(0, 10), PaddingTop = UDim.new(0, 10) }, Duration = 0.5 }
				})
			else
				Tween({
					Window.Interface.Base,
					Window.Interface.Base.Sidebar.Information.Information_Container.Padding
				}, {
					{ Goal = { Size = UDim2.new(0, 667, 0, 35) }, Duration = 0.5 },
					{ Goal = { PaddingLeft = UDim.new(0, 5), PaddingTop = UDim.new(0, 2) }, Duration = 0.5 }
				})
				
			end
		end,
	})
	
	Input(Window.Interface.Base.BottomBar.Youtube, {
		HoverOff = function()
			Tween({
				Window.Interface.Base.BottomBar.Youtube,
			}, {
				{Goal = { ImageTransparency = 0.5 }, Duration = 0.5}
			})
		end,
		HoverOn = function()
			Tween({
				Window.Interface.Base.BottomBar.Youtube,
			}, {
				{Goal = { ImageTransparency = 0 }, Duration = 0.5}
			})
		end,
		Click = function()
			setclipboard(Options.YoutubeLink)
			Window:Notify({
				Title = "Link Copied!",
				Subtitle = "The youtube link has been copied\n To your clipboard.",
				Duration = 6
			})
		end,
	})

	Input(Window.Interface.Base.BottomBar.Discord, {
		HoverOff = function()
			Tween({
				Window.Interface.Base.BottomBar.Discord,
			}, {
				{Goal = { ImageTransparency = 0.5 }, Duration = 0.5}
			})
		end,
		HoverOn = function()
			Tween({
				Window.Interface.Base.BottomBar.Discord,
			}, {
				{Goal = { ImageTransparency = 0 }, Duration = 0.5}
			})
		end,
		Click = function()
			setclipboard(Options.DiscordLink)
			Window:Notify({
				Title = "Link Copied!",
				Subtitle = "The discord link has been copied\n To your clipboard.",
				Duration = 6
			})
		end,
	})

	function Window:Notify(Options)
		Options = Settings({
			Title = "Notification",
			Subtitle = "Subtitle",
			Duration = 1
		}, Options)

		local Notification = {}

		Notification.Container = Object.New("Frame", {
			Parent = Window.Notifications,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(11, 11, 11),
			AnchorPoint = Vector2.new(1, 0.5),
			AutomaticSize = Enum.AutomaticSize.Y,
			Size = UDim2.new(1, 0, 0, 0),
			Position = UDim2.new(1, 0, 1, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			Name = "Notification_Container",
		}, {
			Object.New("UICorner", {
				CornerRadius = UDim.new(0, 10),
				Name = "Corner",
			}),
			Object.New("UIPadding", {
				PaddingTop = UDim.new(0, 10),
				PaddingRight = UDim.new(0, 10),
				PaddingLeft = UDim.new(0, 10),
				PaddingBottom = UDim.new(0, 10),
				Name = "Padding",
			}),
			Object.New("UIScale", {
				Scale = 0.85,
				Name = "Scale",
			}),
			Object.New("UIStroke", {
				Transparency = 0.9,
				ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
				Color = Color3.fromRGB(255, 255, 255),
				Name = "Stroke",
			}),
			Object.New("Frame", {
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				Size = UDim2.new(1, 0, 1, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				BackgroundTransparency = 1,
				Name = "Container",
			}, {
				Object.New("TextLabel", {
					TextTruncate = Enum.TextTruncate.SplitWord,
					BorderSizePixel = 0,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextTransparency = 0.1,
					TextYAlignment = Enum.TextYAlignment.Top,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					TextSize = 14,
					FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),
					TextColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 1,
					RichText = true,
					Size = UDim2.new(1, -20, 0, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Text = "Azure",
					AutomaticSize = Enum.AutomaticSize.Y,
					Name = "Title",
				}),
				Object.New("TextLabel", {
					TextWrapped = true,
					TextTruncate = Enum.TextTruncate.SplitWord,
					BorderSizePixel = 0,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextTransparency = 0.7,
					TextYAlignment = Enum.TextYAlignment.Top,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					TextSize = 12,
					FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
					TextColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 1,
					RichText = true,
					Size = UDim2.new(1, -20, 0, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Text = "Avery very long notification to test the longestness of the text warpping on the notification we are testin g this for design pursoses which is smosome one some what cool yeah",
					LayoutOrder = 1,
					AutomaticSize = Enum.AutomaticSize.Y,
					Position = UDim2.new(0.51092, 0, -0.10299, 0),
					Name = "Description",
				}),
				Object.New("UIListLayout", {
					Padding = UDim.new(0, 5),
					VerticalAlignment = Enum.VerticalAlignment.Center,
					SortOrder = Enum.SortOrder.LayoutOrder,
					Name = "List",
				})
			})
		})

		spawn(function()
			task.wait(tonumber(Options.Duration))
			Tween({
				Notification.Container.Container.Title,
				Notification.Container.Container.Description
			}, {
				{ Goal = { TextTransparency = 1 }, Duration = 0.5 },
				{ Goal = { TextTransparency = 1 }, Duration = 0.5, function() end }
			})
			task.wait(0.35)
			Notification.Container.Container.Description:Destroy()	
			task.wait(0.05)
			Notification.Container.Container.Title:Destroy()
			task.wait(0.05)
			Notification.Container:Destroy()
		end)

		return Notification
	end
	
	function Window:StatWindow(Options)
		Options = Settings({
			Title = "Stats"
		}, Options)

		local StatWindow = {
			Enabled = false,
		}

		StatWindow.Container = Object.New("Frame", {
			Parent = Window.Interface,
			BorderSizePixel = 0,
			BackgroundColor3 = Color3.fromRGB(16, 16, 16),
			AnchorPoint = Vector2.new(1, 0),
			ClipsDescendants = true,
			Size = UDim2.new(0, 160, 0, 300),
			Position = UDim2.new(1, -15, 0, 15),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			BackgroundTransparency = 0.05,
			Name = "Information",
		}, {
			Object.New("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Name = "Corner",
			}),
			Object.New("Frame", {
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				ClipsDescendants = true,
				Size = UDim2.new(1, 0, 1, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				BackgroundTransparency = 1,
				Name = "Content",
			}, {
				Object.New("ScrollingFrame", {
					Active = true,
					BorderSizePixel = 0,
					CanvasSize = UDim2.new(0, 0, 0, 0),
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					ScrollBarImageTransparency = 0.8,
					AutomaticCanvasSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 1, -33),
					Position = UDim2.new(0, 0, 0, 33),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					ScrollBarThickness = 1,
					BackgroundTransparency = 1,
					Name = "Items",
				}, {
					Object.New("UIListLayout", {
						Padding = UDim.new(0, 14),
						SortOrder = Enum.SortOrder.LayoutOrder,
						Name = "List",
					})
				}),
				Object.New("Frame", {
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					LayoutOrder = -1,
					BackgroundTransparency = 1,
					Name = "Information",
				}, {
					Object.New("TextLabel", {
						TextWrapped = true,
						BorderSizePixel = 0,
						TextYAlignment = Enum.TextYAlignment.Top,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						TextSize = 13,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),
						TextColor3 = Color3.fromRGB(255, 255, 255),
						BackgroundTransparency = 1,
						RichText = true,
						Size = UDim2.new(1, 0, 0, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = "Stas",
						AutomaticSize = Enum.AutomaticSize.XY,
						Name = Options.Title,
					}),
					Object.New("UIPadding", {
						PaddingBottom = UDim.new(0, 10),
						Name = "Padding",
					}),
					Object.New("Frame", {
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						AnchorPoint = Vector2.new(0, 1),
						Size = UDim2.new(1, 0, 0, 1),
						Position = UDim2.new(0, 0, 1, 10),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						LayoutOrder = 1,
						BackgroundTransparency = 0.9,
						Name = "Line",
					})
				}),
				Object.New("UIPadding", {
					PaddingTop = UDim.new(0, 15),
					PaddingRight = UDim.new(0, 15),
					PaddingLeft = UDim.new(0, 15),
					PaddingBottom = UDim.new(0, 15),
					Name = "Padding",
				})
			})
		})

		function StatWindow:Stat(Options)
			Options = Settings({
				Title = "Stat",
				Value = "0"
			}, Options)

			local Stat = {}

			Stat.Container = Object.New("TextLabel", {
				Parent = StatWindow.Container.Content.Items,
				TextWrapped = true,
				BorderSizePixel = 0,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextTransparency = 0.5,
				TextYAlignment = Enum.TextYAlignment.Top,
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				TextSize = 11,
				FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),
				TextColor3 = Color3.fromRGB(255, 255, 255),
				BackgroundTransparency = 1,
				RichText = true,
				Size = UDim2.new(1, 0, 0, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				Text = Options.Title .. " | " .. tostring(Options.Value),
				AutomaticSize = Enum.AutomaticSize.XY,
				Name = "Stat",
			})

			function Stat:Update(Value)
				Stat.Container.Text = Options.Title .. " | " .. tostring(Value)
			end

			return Stat
		end

		function StatWindow:Toggle(bool)
			StatWindow.Enabled = bool or not StatWindow.Enabled
			
			if StatWindow.Enabled then
				StatWindow.Container.Size = UDim2.new(0, 160, 0, 300)
			else
				StatWindow.Container.Size = UDim2.new(0, 160, 0, 0)
			end
		end

		return StatWindow
	end

	function Window:ToggleOpen()
		Window.Enabled = not Window.Enabled

		if Window.Enabled == true then
			Window.Interface.Base.Visible = true
		elseif Window.Enabled == false then
			Window.Interface.Base.Visible = false
		end
	end

	function Window:Tab(Options)
		Options = Settings({
			Title = "Tab",
			Icon = "10734950309",
			PremiumOnly = false
		}, Options)
		
		local Tab = {
			Active = false,
			PremiumOnly = Options.PremiumOnly or false
		}
		
		Tab.Button = Object.New("CanvasGroup", {
			Name = "TabButton",
			Active = true,
			BorderSizePixel = 0,
			BackgroundColor3 = Theme.Default.Light,
			Selectable = true,
			AnchorPoint = Vector2.new(0.5, 0),
			Size = UDim2.new(1, -26, 0, 30),
			Position = UDim2.new(0.5, 0, 0, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			LayoutOrder = 2,
			BackgroundTransparency = 1,
			Parent = Window.Interface.Base.Sidebar.Navigation.TabButtons.TabButtons_Container
		}, {
			Object.New("UICorner", {
				Name = "Corner",
				CornerRadius = UDim.new(0, 6)
			}),
			Object.New("UIStroke", {
				Name = "Stroke",
				Transparency = 1,
				ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
				Color = Theme.Default.Light,
			}),
			Object.New("ImageLabel", {
				Name = "Image",
				BorderSizePixel = 0,
				BackgroundColor3 = Theme.Default.Light,
				ImageColor3 = Theme.Default.Light,
				ImageTransparency = 0.5,
				AnchorPoint = Vector2.new(0, 0.5),
				Image = "rbxassetid://" .. Options.Icon,
				Size = UDim2.new(0, 13, 0, 13),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				BackgroundTransparency = 1,
				Position = UDim2.new(0, 10, 0.5, 0)
			}),
			Object.New("TextLabel", {
				Name = "Title",
				TextTruncate = Enum.TextTruncate.SplitWord,
				BorderSizePixel = 0,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextTransparency = 0.5,
				TextYAlignment = Enum.TextYAlignment.Top,
				BackgroundColor3 = Theme.Default.Light,
				TextSize = 11,
				FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
				TextColor3 = Theme.Default.Light,
				BackgroundTransparency = 1,
				RichText = true,
				AnchorPoint = Vector2.new(1, 0.5),
				Size = UDim2.new(1, -46, 0, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				Text = Options.Title,
				LayoutOrder = 1,
				AutomaticSize = Enum.AutomaticSize.Y,
				Position = UDim2.new(1, -13, 0.5, 0)
			}),
			Object.New("Frame", {
				Name = "Selection",
				BorderSizePixel = 0,
				BackgroundColor3 = Theme.Default.Light,
				AnchorPoint = Vector2.new(0.5, 1),
				Size = UDim2.new(0, 0, 0, 1),
				Position = UDim2.new(0.5, 0, 1, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0)
			}, {
				Object.New("UICorner", {
					CornerRadius = UDim.new(111, 111)
				})
			})
		})
		
		Tab.Container = Object.New("ScrollingFrame", {
			Name = "Tabs_Container",
			BorderSizePixel = 0,
			CanvasSize = UDim2.new(0, 0, 1, 0),
			TopImage = "",
			BackgroundColor3 = Theme.Default.Light,
			ScrollBarImageTransparency = 0.8,
			BottomImage = "",
			AutomaticCanvasSize = Enum.AutomaticSize.Y,
			ClipsDescendants = false,
			Size = UDim2.new(1, 0, 1, 0),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			ScrollBarThickness = 1,
			BackgroundTransparency = 1,
			Parent = Window.Interface.Base.Main.Tabs,
			Visible = false
		}, {
			Object.New("UIPadding", {
				Name = "Padding",
				PaddingTop = UDim.new(0, 5),
				PaddingRight = UDim.new(0, 3),
				PaddingLeft = UDim.new(0, 11),
				PaddingBottom = UDim.new(0, 5)
			}),
			Object.New("UIListLayout", {
				Name = "List",
				Padding = UDim.new(0, 15),
				SortOrder = Enum.SortOrder.LayoutOrder,
				FillDirection = Enum.FillDirection.Horizontal
			}),
			Object.New("Frame", {
				Name = "Left",
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.fromRGB(0, 0, 0),
				AutomaticSize = Enum.AutomaticSize.Y,
				Size = UDim2.new(0.5, -10, 0, 0),
				Position = UDim2.new(0.512, 0, 0, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				BackgroundTransparency = 1
			}, {
				Object.New("UIListLayout", {
					Name = "List",
					Padding = UDim.new(0, 15),
					SortOrder = Enum.SortOrder.LayoutOrder
				})
			}),
			Object.New("Frame", {
				Name = "Right",
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.fromRGB(0, 0, 0),
				AutomaticSize = Enum.AutomaticSize.Y,
				Size = UDim2.new(0.5, -10, 0, 0),
				Position = UDim2.new(0.512, 0, 0, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				LayoutOrder = 1,
				BackgroundTransparency = 1
			}, {
				Object.New("UIListLayout", {
					Name = "List",
					Padding = UDim.new(0, 15),
					SortOrder = Enum.SortOrder.LayoutOrder
				})
			})
		})
		
		function Tab:Set(Bool)
			if Bool and Window.CurrentTab == Tab then
				return
			end

			if Bool and (Tab.PremiumOnly and Window.Premium or not Tab.PremiumOnly) then
				if Window.CurrentTab ~= nil then
					Window.CurrentTab:Set(false)
				end
				
				Tween({
					Tab.Button,
					Tab.Button.Title,
					Tab.Button.Image,
					Tab.Button.Selection
				}, {
					{Goal = { BackgroundTransparency = 0.98 }, Duration = 0.5},
					{Goal = { TextTransparency = 0 }, Duration = 0.5},
					{Goal = { ImageTransparency = 0 }, Duration = 0.5},
					{Goal = { Size = UDim2.new(1, 0, 0, 1) }, Duration = 0.5}
				})

				Tab.Container.Visible = true
				Tab.Active = true
				Window.CurrentTab = Tab
			else
				Tween({
					Tab.Button,
					Tab.Button.Title,
					Tab.Button.Image,
					Tab.Button.Selection
				}, {
					{Goal = { BackgroundTransparency = 1 }, Duration = 0.5},
					{Goal = { TextTransparency = 0.5 }, Duration = 0.5},
					{Goal = { ImageTransparency = 0.5 }, Duration = 0.5},
					{Goal = { Size = UDim2.new(0, 0, 0, 1) }, Duration = 0.5}
				})

				Tab.Container.Visible = false
				Tab.Active = false
			end
		end
		
		Input(Tab.Button, {
			HoverOff = function()
				if Tab.Active then
					return
				end
				
				Tab.Hovering = false
				Tween({
					Tab.Button,
					Tab.Button.Title,
					Tab.Button.Image
				}, {
					{Goal = { BackgroundTransparency = 1 }, Duration = 0.5},
					{Goal = { TextTransparency = 0.5 }, Duration = 0.5},
					{Goal = { ImageTransparency = 0.5 }, Duration = 0.5}
				})
			end,
			HoverOn = function()
				if Tab.Active then
					return
				end
				
				Tab.Hovering = true
				Tween({
					Tab.Button,
					Tab.Button.Title,
					Tab.Button.Image
				}, {
					{Goal = { BackgroundTransparency = 0.98 }, Duration = 0.5},
					{Goal = { TextTransparency = 0 }, Duration = 0.5},
					{Goal = { ImageTransparency = 0 }, Duration = 0.5}
				})
			end,
			Click = function()
				Tab:Set(true)
			end,
		})
		
		function Tab:Group(Options)
			Options = Settings({
				Title = "Group",
				Side = "Left"
			}, Options)
			
			local Group = {}
			
			Group.Container = Object.New("Frame", {
				BorderSizePixel = 0,
				BackgroundColor3 = Theme.Default.Light,
				ClipsDescendants = true,
				AutomaticSize = Enum.AutomaticSize.Y,
				Size = UDim2.new(1, 0, 0, 0),
				Position = UDim2.new(0, 0, 0, 0),
				BorderColor3 = Color3.fromRGB(0, 0, 0),
				Name = "Group",
				BackgroundTransparency = 0.98,
				Parent = Tab.Container[Options.Side]
			}, {
				Object.New("UICorner", { Name = "Corner" }),
				Object.New("UIStroke", {
					Transparency = 0.95,
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
					Name = "Stroke",
					Color = Theme.Default.Light,
				}),
				Object.New("UIListLayout", {
					Padding = UDim.new(0, 10),
					SortOrder = Enum.SortOrder.LayoutOrder,
					Name = "List"
				}),
				Object.New("UIPadding", {
					PaddingTop = UDim.new(0, 16),
					PaddingRight = UDim.new(0, 13),
					PaddingLeft = UDim.new(0, 15),
					PaddingBottom = UDim.new(0, 15),
					Name = "Padding"
				}),
				Object.New("Frame", {
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "GroupTitle",
					BackgroundTransparency = 1
				}, {
					Object.New("TextLabel", {
						TextWrapped = true,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTransparency = 0.3,
						BackgroundColor3 = Theme.Default.Light,
						TextSize = 12,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
						TextColor3 = Theme.Default.Light,
						BackgroundTransparency = 1,
						RichText = true,
						Size = UDim2.new(1, 0, 0, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Options.Title,
						AutomaticSize = Enum.AutomaticSize.Y,
						Name = "Title"
					})
				}),
				Object.New("Frame", {
					BorderSizePixel = 0,
					BackgroundColor3 = Theme.Default.Light,
					AnchorPoint = Vector2.new(0, 1),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 1),
					Position = UDim2.new(0, 0, 1, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "Divider",
					BackgroundTransparency = 1
				}, {
					Object.New("Frame", {
						BorderSizePixel = 0,
						BackgroundColor3 = Theme.Default.Light,
						Size = UDim2.new(1, 0, 0, 1),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Name = "Line",
						BackgroundTransparency = 0.9
					})
				})
			})
			
			function Group:Button(Options)
				Options = Settings({
					Title = "Button",
					Callback = function() 
						print"Buttn!"
					end
				}, Options)
				
				local Button = {}
				
				Button.Container = Object.New("Frame", {
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 29),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "Button",
					BackgroundTransparency = 1,
					Parent = Group.Container
				}, {
					Object.New("ImageLabel", {
						BorderSizePixel = 0,
						BackgroundColor3 = Theme.Default.Light,
						ImageTransparency = 0.5,
						AnchorPoint = Vector2.new(1, 0.5),
						Image = "rbxassetid://10709791437",
						Size = UDim2.new(0, 15, 0, 15),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						BackgroundTransparency = 1,
						Name = "Icon",
						Position = UDim2.new(1, 0, 0.5, 0),
						ImageColor3 = Theme.Default.Light
					}),
					Object.New("TextLabel", {
						Active = true,
						TextTruncate = Enum.TextTruncate.AtEnd,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTransparency = 0.5,
						BackgroundColor3 = Theme.Default.Light,
						TextSize = 11,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Theme.Default.Light,
						BackgroundTransparency = 1,
						RichText = true,
						Size = UDim2.new(1, 0, 1, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Options.Title,
						Selectable = true,
						Name = "Title"
					})
				})
				
				Input(Button.Container, {
					HoverOff = function()
						Tween({
							Button.Container.Title, 
							Button.Container.Icon
						}, {
							{Goal = { TextTransparency = 0.5 }, Duration = 0.2},
							{Goal = { ImageTransparency = 0.5 }, Duration = 0.2}
						})
					end,
					HoverOn = function()
						Tween({
							Button.Container.Title, 
							Button.Container.Icon
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2},
							{Goal = { ImageTransparency = 0 }, Duration = 0.2}
						})
					end,
					Click = function()
						Tween({
							Button.Container.Title, 
							Button.Container.Icon
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2},
							{Goal = { ImageTransparency = 0 }, Duration = 0.2}
						})
						Options.Callback()
					end
				})
				
				return Button
			end
			
			function Group:Toggle(Options)
				Options = Settings({
					Title = "Toggle",
					Default = false,
					Callback = function(Value)
						print(Value)
					end   
				}, Options)
				
				local Toggle = {
					State = Options.Default
				}
				
				Toggle.Container = Object.New("Frame", {
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 29),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "Toggle",
					BackgroundTransparency = 1,
					Parent = Group.Container
				}, {
					Object.New("TextLabel", {
						TextTruncate = Enum.TextTruncate.AtEnd,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTransparency = 0.5,
						TextYAlignment = Enum.TextYAlignment.Top,
						BackgroundColor3 = Theme.Default.Light,
						TextSize = 11,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Theme.Default.Light,
						BackgroundTransparency = 1,
						RichText = true,
						AnchorPoint = Vector2.new(0, 0.5),
						Size = UDim2.new(1, -50, 0, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Options.Title,
						AutomaticSize = Enum.AutomaticSize.Y,
						Name = "Title",
						Position = UDim2.new(0, 0, 0.5, 0)
					}),
					Object.New("ImageLabel", {
						Active = true,
						BorderSizePixel = 0,
						BackgroundColor3 = Theme.Default.Light,
						ImageTransparency = 0.5,
						AnchorPoint = Vector2.new(1, 0.5),
						Image = "rbxassetid://18772190202",
						Size = UDim2.new(0, 31, 0, 16),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						BackgroundTransparency = 1,
						Selectable = true,
						Name = "Toggle",
						Position = UDim2.new(1, 0, 0.5, 0),
						ImageColor3 = Theme.Default.Dark
					}, {
						Object.New("ImageLabel", {
							ZIndex = 2,
							BorderSizePixel = 0,
							BackgroundColor3 = Theme.Default.Light,
							ImageTransparency = 0.85,
							AnchorPoint = Vector2.new(1, 0.5),
							Image = "rbxassetid://18772309008",
							Size = UDim2.new(0, 11, 0, 11),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							BackgroundTransparency = 1,
							Name = "Head",
							Position = UDim2.new(0.45, 0, 0.5, 0),
							ImageColor3 = Theme.Default.Light
						})
					})
				})
				
				function Toggle:Set(Bool)
					if Bool == nil then
						Toggle.State = not Toggle.State
					else
						Toggle.State = Bool
					end
					
					if Toggle.State then
						Tween({
							Toggle.Container.Toggle,
							Toggle.Container.Toggle.Head
						}, {
							{Goal = { ImageTransparency = 0 }, Duration = 0.2},
							{Goal = { ImageTransparency = 0, Position = UDim2.new(1, -3, 0.5, 0) }, Duration = 0.2},
						})
					else
						Tween({
							Toggle.Container.Toggle,
							Toggle.Container.Toggle.Head
						}, {
							{Goal = { ImageTransparency = 0.5 }, Duration = 0.2},
							{Goal = { ImageTransparency = 0.85, Position = UDim2.new(0.45, 0, 0.5, 0) }, Duration = 0.2},
						})
					end
				end
				
				Input(Toggle.Container, {
					HoverOff = function()
						Tween({
							Toggle.Container.Title
						}, {
							{Goal = { TextTransparency = 0.5 }, Duration = 0.2}
						})
					end,
					HoverOn = function()
						Tween({
							Toggle.Container.Title
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2}
						})
					end,
					Click = function()
						Tween({
							Toggle.Container.Title
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2}
						})
						Toggle:Set()
						Options.Callback(Toggle.State)
					end
				})
				
				Toggle:Set(Options.Default)
				
				return Toggle
			end
			
			function Group:Slider(Options)
				Options = Settings({
					Title = "Slider",
					Min = 0,
					Max = 20,
					Default = 5,
					Increment = 0.01,
					Callback = function(Value)
						print(Value)
					end   
				}, Options)
				
				local Slider = {
					Value = Options.Default,
					Connection = nil
				}
				
				Slider.Container = Object.New("Frame", {
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 39),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "Slider",
					BackgroundTransparency = 1,
					Parent = Group.Container
				}, {
					Object.New("TextLabel", {
						TextTruncate = Enum.TextTruncate.AtEnd,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTransparency = 0.5,
						TextYAlignment = Enum.TextYAlignment.Top,
						BackgroundColor3 = Theme.Default.Light,
						TextSize = 11,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Theme.Default.Light,
						BackgroundTransparency = 1,
						RichText = true,
						AnchorPoint = Vector2.new(0, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Options.Title,
						AutomaticSize = Enum.AutomaticSize.XY,
						Name = "Title",
						Position = UDim2.new(0, 0, 0, 9)
					}),
					Object.New("TextBox", {
						TextColor3 = Theme.Default.Light,
						BorderSizePixel = 0,
						TextTransparency = 0.1,
						TextSize = 9,
						Name = "NumberValue",
						BackgroundColor3 = Theme.Default.Light,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						AnchorPoint = Vector2.new(1, 0),
						ClipsDescendants = true,
						PlaceholderText = "??%",
						Size = UDim2.new(0, 29, 0, 15),
						Position = UDim2.new(1, 0, 0, 7),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = "",
						LayoutOrder = 1,
						BackgroundTransparency = 0.95,
						PlaceholderColor3 = Theme.Default.Light
					}, {
						Object.New("UICorner", {
							Name = "SliderValueUICorner",
							CornerRadius = UDim.new(0, 4)
						}),
						Object.New("UIStroke", {
							Transparency = 0.9,
							ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
							Name = "SliderValueUIStroke",
							Color = Theme.Default.Light,
						}),
						Object.New("UIPadding", {
							PaddingRight = UDim.new(0, 2),
							Name = "SliderValueUIPadding",
							PaddingLeft = UDim.new(0, 2)
						})
					}),
					Object.New("ImageLabel", {
						BorderSizePixel = 0,
						BackgroundColor3 = Theme.Default.Light,
						Image = "rbxassetid://18772615246",
						Size = UDim2.new(1, 0, 0, 3),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						BackgroundTransparency = 1,
						ImageColor3 = Theme.Default.Dark,
						Name = "Bar",
						Position = UDim2.new(0, 0, 1, -5)
					}, {
						Object.New("ImageLabel", {
							Active = true,
							BorderSizePixel = 0,
							BackgroundColor3 = Theme.Default.Light,
							AnchorPoint = Vector2.new(0.5, 0.5),
							Image = "rbxassetid://18772834246",
							Size = UDim2.new(0, 8, 0, 8),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							ImageColor3 = Theme.Default.Light,
							BackgroundTransparency = 1,
							Selectable = true,
							Name = "Head",
							Position = UDim2.new(0.5, 0, 0.5, 0)
						})
					})
				})
				
				function Slider:Set(Value)
					Value = math.floor(Value / Options.Increment + 0.5) * Options.Increment
					Value = math.floor(Value * 100 + 0.5) / 100

					Slider.Value = math.clamp(Value, Options.Min, Options.Max)
					Slider.Container.NumberValue.Text = tostring(Slider.Value)
					local Percentage = (Slider.Value - Options.Min) / (Options.Max - Options.Min)
					Slider.Container.Bar.Head.Position = UDim2.new(Percentage, 0, 0.5, 0)
					Options.Callback(Slider.Value)
				end
				
				function Slider:_Update(Input)
					local AbsoluteBarPosition = Slider.Container.Bar.AbsolutePosition
					local AbsoluteBarSize = Slider.Container.Bar.AbsoluteSize
					local Percentage = math.clamp((Input.Position.X - AbsoluteBarPosition.X) / AbsoluteBarSize.X, 0, 1)
					local Value = Options.Min + (Options.Max - Options.Min) * Percentage
					Slider:Set(Value)
				end
				
				Input(Slider.Container, {
					HoverOff = function()
						Tween({
							Slider.Container.Title, 
							--Button.Container.Icon
						}, {
							{Goal = { TextTransparency = 0.5 }, Duration = 0.2},
							--{Goal = { ImageTransparency = 0.5 }, Duration = 0.2}
						})
					end,
					HoverOn = function()
						Tween({
							Slider.Container.Title, 
							--Button.Container.Icon
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2},
							--{Goal = { ImageTransparency = 0 }, Duration = 0.2}
						})
					end,
					Click = function(Input)
						Tween({
							Slider.Container.Title, 
							--Button.Container.Icon
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2},
							--{Goal = { ImageTransparency = 0 }, Duration = 0.2}
						})
						Options.Callback(Slider.Value)
						Slider:_Update(Input)
					end,
					Dragging = function(Input)
						Rise.DisableDrag = true
						Slider:_Update(Input)
					end,
					UnDragging = function()
						Rise.DisableDrag = false
					end
				})

				Slider.Container.NumberValue.Focused:Connect(function()
					Slider.Container.NumberValue.FocusLost:Wait()
					local Value = tonumber(Slider.Container.NumberValue.Text)
					if Value then
						Slider:Set(Value)
					else
						Slider:Set(Slider.Value)
					end
				end)
				
				Slider:Set(Options.Default)
				
				return Slider
			end
			
			function Group:Inputbox(Options)
				Options = Settings({
					Title = "Input",
					Default = "",
					Placeholder = "",
					KeepText = true,
					Callback = function(Value)
						print(Value)
					end,
				}, Options)
				
				local Inputbox = {}
				
				Inputbox.Container = Object.New("Frame", {
					Parent = Group.Container,
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 29),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "Input",
					BackgroundTransparency = 1,
				}, {
					Object.New("TextLabel", {
						TextTruncate = Enum.TextTruncate.AtEnd,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTransparency = 0.5,
						TextYAlignment = Enum.TextYAlignment.Top,
						BackgroundColor3 = Theme.Default.Light,
						TextSize = 11,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Theme.Default.Light,
						BackgroundTransparency = 1,
						RichText = true,
						AnchorPoint = Vector2.new(0, 0.5),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Options.Title,
						AutomaticSize = Enum.AutomaticSize.XY,
						Name = "Title",
						Position = UDim2.new(0, 0, 0.5, 0),
					}),
					Object.New("TextBox", {
						TextColor3 = Theme.Default.Light,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Right,
						TextTransparency = 0.1,
						TextSize = 9,
						Name = "Box",
						BackgroundColor3 = Theme.Default.Light,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						AutomaticSize = Enum.AutomaticSize.X,
						AnchorPoint = Vector2.new(1, 0.5),
						ClipsDescendants = true,
						PlaceholderText = Options.Placeholder,
						Size = UDim2.new(0, 21, 0, 15),
						Position = UDim2.new(1, 0, 0.5, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Options.Default,
						ClearTextOnFocus = not Options.KeepText,
						LayoutOrder = 1,
						BackgroundTransparency = 0.95,
						PlaceholderColor3 = Theme.Default.Light
					}, {
						Object.New("UICorner", {
							Name = "Corner",
							CornerRadius = UDim.new(0, 4),
						}),
						Object.New("UIStroke", {
							Transparency = 0.9,
							ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
							Name = "Stroke",
							Color = Theme.Default.Light,
						}),
						Object.New("UIPadding", {
							PaddingRight = UDim.new(0, 5),
							Name = "Padding",
							PaddingLeft = UDim.new(0, 5),
						}),
						Object.New("UISizeConstraint", {
							Name = "SizeConstraint",
							MaxSize = Vector2.new(87, 8999999488),
						}),
					}),
				})
				
				Input(Inputbox.Container, {
					HoverOff = function()
						Tween({
							Inputbox.Container.Title,
						}, {
							{Goal = { TextTransparency = 0.5 }, Duration = 0.2}
						})
					end,
					HoverOn = function()
						Tween({
							Inputbox.Container.Title,
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2}
						})
					end
				})
				
				Inputbox.Container.Box.FocusLost:Connect(function()
					Options.Callback(Inputbox.Container.Box.Text)
				end)

				function Inputbox:SetInputField(text)
					Inputbox.Container.Box.Text = text
				  end
				
				return Inputbox
			end
			
			function Group:Keybind(Options)
				Options = Settings({
					Title = "Bind",
					Default = Enum.KeyCode.E,
					Hold = false,
					Callback = function()
						print("Pressed The Keybind")
					end 
				}, Options)

				local Keybind = {
					CurrentKey = Options.Default
				}

				Keybind.Container = Object.New("Frame", {
					Parent = Group.Container,
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 29),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "Keybind",
					BackgroundTransparency = 1,
				}, {
					Object.New("TextLabel", {
						TextTruncate = Enum.TextTruncate.AtEnd,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTransparency = 0.5,
						TextYAlignment = Enum.TextYAlignment.Top,
						BackgroundColor3 = Theme.Default.Light,
						TextSize = 11,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Theme.Default.Light,
						BackgroundTransparency = 1,
						RichText = true,
						AnchorPoint = Vector2.new(0, 0.5),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Options.Title,
						AutomaticSize = Enum.AutomaticSize.XY,
						Name = "Title",
						Position = UDim2.new(0, 0, 0.5, 0),
					}),
					Object.New("TextBox", {
						TextColor3 = Theme.Default.Light,
						BorderSizePixel = 0,
						TextTransparency = 0.1,
						TextSize = 9,
						Name = "Box",
						BackgroundColor3 = Theme.Default.Light,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						AutomaticSize = Enum.AutomaticSize.X,
						AnchorPoint = Vector2.new(1, 0.5),
						ClipsDescendants = true,
						Size = UDim2.new(0, 21, 0, 15),
						Position = UDim2.new(1, 0, 0.5, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = "",
						LayoutOrder = 1,
						PlaceholderText = "...",
						BackgroundTransparency = 0.95,
						PlaceholderColor3 = Theme.Default.Light
					}, {
						Object.New("UICorner", {
							Name = "Corner",
							CornerRadius = UDim.new(0, 4),
						}),
						Object.New("UIStroke", {
							Transparency = 0.9,
							ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
							Name = "Stroke",
							Color = Theme.Default.Light,
						}),
						Object.New("UIPadding", {
							PaddingRight = UDim.new(0, 5),
							Name = "Padding",
							PaddingLeft = UDim.new(0, 5),
						}),
						Object.New("UISizeConstraint", {
							Name = "SizeConstraint",
							MaxSize = Vector2.new(50, math.huge),
						}),
					}),
				})

				function Keybind:SetBind(Key)
					if Key == Keybind.CurrentKey then
						return
					end

					if Key then
						if typeof(Key) == "EnumItem" and Key.EnumType == Enum.KeyCode then
							Keybind.CurrentKey = Key
							Keybind.Container.Box.Text = Key.Name
						else
							Keybind.CurrentKey = Keybind.CurrentKey
							Keybind.Container.Box.Text = Keybind.Container.Box.Text
						end
					end
				end

				Input(Keybind.Container, {
					HoverOff = function()
						Tween({
							Keybind.Container.Title,
						}, {
							{Goal = { TextTransparency = 0.5 }, Duration = 0.2}
						})
					end,
					HoverOn = function()
						Tween({
							Keybind.Container.Title,
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2}
						})
					end
				})

				Keybind.Container.Box:GetPropertyChangedSignal("Text"):Connect(function()
					local Text = Keybind.Container.Box.Text
					if Text ~= "" and Text ~= " " then
						Keybind.Container.Box:ReleaseFocus()

						local Mappings = {
							["1"] = Enum.KeyCode.One,
							["2"] = Enum.KeyCode.Two,
							["3"] = Enum.KeyCode.Three,
							["4"] = Enum.KeyCode.Four,
							["5"] = Enum.KeyCode.Five,
							["6"] = Enum.KeyCode.Six,
							["7"] = Enum.KeyCode.Seven,
							["8"] = Enum.KeyCode.Eight,
							["9"] = Enum.KeyCode.Nine,
							["0"] = Enum.KeyCode.Zero,

							["`"] = Enum.KeyCode.Backquote,
							["~"] = Enum.KeyCode.Backquote,
							["!"] = Enum.KeyCode.One,
							["@"] = Enum.KeyCode.At,
							["#"] = Enum.KeyCode.Hash,
							["$"] = Enum.KeyCode.Dollar,
							["%"] = Enum.KeyCode.Percent,
							["^"] = Enum.KeyCode.Caret,
							["&"] = Enum.KeyCode.Ampersand,
							["*"] = Enum.KeyCode.Asterisk,
							["("] = Enum.KeyCode.LeftParenthesis,
							[")"] = Enum.KeyCode.RightParenthesis,
							["-"] = Enum.KeyCode.Minus,
							["_"] = Enum.KeyCode.Underscore,
							["="] = Enum.KeyCode.Equals,
							["+"] = Enum.KeyCode.Plus,
							["["] = Enum.KeyCode.LeftBracket,
							["]"] = Enum.KeyCode.RightBracket,
							["\\"] = Enum.KeyCode.BackSlash,
							[""] = Enum.KeyCode.Semicolon,
							[":"] = Enum.KeyCode.Colon,
							["'"] = Enum.KeyCode.Quote,
							['"'] = Enum.KeyCode.QuotedDouble,
							[","] = Enum.KeyCode.Comma,
							["."] = Enum.KeyCode.Period,
							["/"] = Enum.KeyCode.Slash,
							["?"] = Enum.KeyCode.Question,

							["LeftShift"] = Enum.KeyCode.LeftShift,
							["RightShift"] = Enum.KeyCode.RightShift,
							["LeftCtrl"] = Enum.KeyCode.LeftControl,
							["RightCtrl"] = Enum.KeyCode.RightControl,
							["LeftAlt"] = Enum.KeyCode.LeftAlt,
							["RightAlt"] = Enum.KeyCode.RightAlt,
							["Tab"] = Enum.KeyCode.Tab,
							["CapsLock"] = Enum.KeyCode.CapsLock,
							["Space"] = Enum.KeyCode.Space,

							["Mouse1"] = Enum.UserInputType.MouseButton1,
							["Mouse2"] = Enum.UserInputType.MouseButton2,
							["Mouse3"] = Enum.UserInputType.MouseButton3,
							["MouseWheel"] = Enum.UserInputType.MouseWheel,
						}

						local Key = Mappings[Text]

						if not Key and #Text == 1 then
							Key = Enum.KeyCode[string.upper(Text)]
						end

						if Key then
							Keybind:SetBind(Key)
						end
					end
				end)

				Keybind.Container.Box.FocusLost:Connect(function()
					if Keybind.Container.Box.Text == "" or Keybind.Container.Box.Text == " " then
						Keybind.Container.Box.Text = Keybind.CurrentKey.Name
					end
				end)

				UserInputService.InputBegan:Connect(function(Key)
					if Key.KeyCode == Keybind.CurrentKey or Key.UserInputType == Keybind.CurrentKey then
						Options.Callback()
					end
				end)

				Keybind:SetBind(Options.Default)

				return Keybind
			end
			
			function Group:Label(Options)
				Options = Settings({
					Content = "",
					Important = false
				}, Options)
				
				local Label = {}
				
				Label.Container = Object.New("Frame", {
					Parent = Group.Container,
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 29),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					Name = "Label",
					BackgroundTransparency = 1,
				}, {
					Object.New("TextLabel", {
						TextWrapped = true,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTransparency = Options.Important == false and 0.5 or 0.2,
						BackgroundColor3 = Theme.Default.Light,
						TextSize = 11,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Theme.Default.Light,
						BackgroundTransparency = 1,
						RichText = true,
						Size = UDim2.new(1, 0, 1, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = Options.Content,
						AutomaticSize = Enum.AutomaticSize.Y,
						Name = "Content",
					}),
				})
				
				Input(Label.Container, {
					HoverOff = function()
						Tween({
							Label.Container.Content,
						}, {
							{Goal = { TextTransparency = 0.5 }, Duration = 0.2}
						})
					end,
					HoverOn = function()
						Tween({
							Label.Container.Content,
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2}
						})
					end
				})
				
				function Label:Set(Text)
					Label.Container.Content.Text = Text
				end

				return Label
			end
			
			function Group:Dropdown(Options)
				Options = Settings({
					Title = "Dropdown",
					MultiSelect = false,
					OnSelectionChanged = function(Selected) end
				}, Options)

				local Dropdown = {
					CurrentItemId = nil,
					Items = {},
					CanClose = true,
					Selected = {},
					Index = 1
				}
				
				Dropdown.Container = Object.New("Frame", {
					Name = "Dropdown",
					Parent = Group.Container,
					BorderSizePixel = 0,
					BackgroundColor3 = Theme.Default.Light,
					ClipsDescendants = true,
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 29),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BackgroundTransparency = 0.985,
				}, {
					Object.New("UIPadding", {
						Name = "Padding",
						PaddingRight = UDim.new(0, 10),
						PaddingLeft = UDim.new(0, 10),
					}),
					Object.New("TextLabel", {
						Name = "Title",
						TextTruncate = Enum.TextTruncate.SplitWord,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTransparency = 0.5,
						BackgroundColor3 = Theme.Default.Light,
						TextSize = 11,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
						TextColor3 = Theme.Default.Light,
						BackgroundTransparency = 1,
						RichText = true,
						Size = UDim2.new(1, -20, 0, 29),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text =  Options.Title .. " - None",
						AutomaticSize = Enum.AutomaticSize.Y
					}),
					Object.New("UIStroke", {
						Name = "Stroke",
						Transparency = 0.95,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = Theme.Default.Light,
					}),
					Object.New("UICorner", {
						Name = "Corner",
						CornerRadius = UDim.new(0, 6),
					}),
					Object.New("ImageLabel", {
						Name = "Icon",
						BorderSizePixel = 0,
						BackgroundColor3 = Theme.Default.Light,
						ImageColor3 = Theme.Default.Light,
						ImageTransparency = 0.5,
						AnchorPoint = Vector2.new(1, 0),
						Image = "rbxassetid://122654076779969",
						Size = UDim2.new(0, 13, 0, 13),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						BackgroundTransparency = 1,
						Position = UDim2.new(1, 0, 0, 8),
					}),
					Object.New("Frame", {
						Name = "Content",
						BorderSizePixel = 0,
						BackgroundColor3 = Theme.Default.Light,
						ClipsDescendants = true,
						AutomaticSize = Enum.AutomaticSize.Y,
						Size = UDim2.new(1, 0, 1, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						BackgroundTransparency = 1,
						Visible = false,
					}, {
						Object.New("UIPadding", {
							Name = "Padding",
							PaddingTop = UDim.new(0, 38),
							PaddingBottom = UDim.new(0, 10),
						}),
						Object.New("UIListLayout", {
							Name = "List",
							Padding = UDim.new(0, 5),
							SortOrder = Enum.SortOrder.LayoutOrder,
						}),
						Object.New("Frame", {
							Name = "SearchBar",
							Active = false,
							BorderSizePixel = 0,
							BackgroundColor3 = Theme.Default.Light,
							Size = UDim2.new(1, 0, 0, 21),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							LayoutOrder = 2,
							BackgroundTransparency = 0.95,
						}, {
							Object.New("TextBox", {
								Name = "Box",
								AnchorPoint = Vector2.new(1, 0),
								Active = false,
								BorderSizePixel = 0,
								TextXAlignment = Enum.TextXAlignment.Left,
								TextSize = 7,
								TextColor3 = Theme.Default.Light,
								BackgroundColor3 = Theme.Default.Light,
								Selectable = false,
								PlaceholderText = "Search here...",
								Size = UDim2.new(1, -28, 0, 21),
								BorderColor3 = Color3.fromRGB(0, 0, 0),
								Text = "",
								LayoutOrder = 2,
								BackgroundTransparency = 1,
								TextTransparency = 0.1,
								Position = UDim2.new(1, 0, 0, 0),
								ClipsDescendants = true,
								PlaceholderColor3 = Theme.Default.Light
							}),
							Object.New("UICorner", {
								Name = "Corner",
							}),
							Object.New("ImageLabel", {
								Name = "Icon",
								BorderSizePixel = 0,
								BackgroundColor3 = Theme.Default.Light,
								AnchorPoint = Vector2.new(0, 0.5),
								Image = "rbxassetid://86737463322606",
								Size = UDim2.new(0, 8, 0, 8),
								BorderColor3 = Color3.fromRGB(0, 0, 0),
								BackgroundTransparency = 1,
								Position = UDim2.new(0, 10, 0.5, 0),
								ImageColor3 = Theme.Default.Light
							}),
							Object.New("UIPadding", {
								Name = "Padding",
								PaddingRight = UDim.new(0, 5)
							}),
						}),
					}),
				})
				
				Dropdown.Container.Content.SearchBar.Box.Changed:Connect(function(Property)
					if Property == "Text" then
						local searchText = Dropdown.Container.Content.SearchBar.Box.Text:lower()
						for _, Item in pairs(Dropdown.Items) do
							local titleString = tostring(Item.Title):lower()
							if searchText == "" then
								Item.Container.Visible = true
							else
								Item.Container.Visible = titleString:find(searchText) ~= nil
							end
						end
					end
				end)
				
				function Dropdown:GetSelected()
					if not Options.MultiSelect then
						return Dropdown.CurrentItemId
					end

					local Selected = {}
					for _, Item in pairs(Dropdown.Items) do
						if Item.Selected then
							table.insert(Selected, Item.Id)
						end
					end
					return Selected
				end

				function Dropdown:SetSelected(Ids)
					if type(Ids) == "string" or type(Ids) == "number" then
						Ids = {Ids}
					end

					if not Options.MultiSelect then
						for _, Item in pairs(Dropdown.Items) do
							Item.Selected = false
							Item.Container.Mark.Visible = false
						end
					end

					for _, id in ipairs(Ids) do
						for _, Item in pairs(Dropdown.Items) do
							if Item.Id == id then
								Item.Selected = true
								Item.Container.Mark.Visible = true
								if not Options.MultiSelect then
									Dropdown.CurrentItemId = id
									Dropdown.Container.Title.Text = Options.Title .. " - " .. Item.Title
									break
								end
							end
						end
					end

					if Options.MultiSelect then
						local SelectedTitles = {}
						for _, Item in pairs(Dropdown.Items) do
							if Item.Selected then
								table.insert(SelectedTitles, Item.Title)
							end
						end
						local DisplayText = #SelectedTitles > 0 
							and Options.Title .. " - " .. table.concat(SelectedTitles, " • ")
							or Options.Title .. " - None"
						Dropdown.Container.Title.Text = DisplayText
					end

					Options.OnSelectionChanged(Dropdown:GetSelected())
				end

				function Dropdown:ClearSelection()
					for _, Item in pairs(Dropdown.Items) do
						Item.Selected = false
						Item.Container.Mark.Visible = false
					end
					Dropdown.CurrentItemId = nil
					Dropdown.Container.Title.Text = Options.Title .. " - None"
					Options.OnSelectionChanged(Dropdown:GetSelected())
				end
				
				Input(Dropdown.Container, {
					HoverOff = function()
						if Dropdown.CanClose then
							Tween({
								Dropdown.Container.Title,
								Dropdown.Container.Icon,
							}, {
								{Goal = { TextTransparency = 0.5 }, Duration = 0.2},
								{Goal = { ImageTransparency = 0.5 }, Duration = 0.2}
							})
						end
					end,
					HoverOn = function()
						if Dropdown.CanClose then
							Tween({
								Dropdown.Container.Title,
								Dropdown.Container.Icon,
							}, {
								{Goal = { TextTransparency = 0 }, Duration = 0.2},
								{Goal = { ImageTransparency = 0 }, Duration = 0.2}
							})
						end
					end,
					Click = function()
						if Dropdown.CanClose then
							Dropdown.Container.Content.Visible = not Dropdown.Container.Content.Visible
						end
					end,
				})
				
				function Dropdown:AddItem(ItemOptions)
					ItemOptions = Settings({
						Title = "Option",
						Id = nil,
						Default = false,
						Callback = function(Id) print(Id) end
					}, ItemOptions)

					if ItemOptions.Id == nil then
						ItemOptions.Id = Dropdown.Index
						Dropdown.Index = Dropdown.Index + 1
					end

					local Item = {
						Selected = false,
						Id = ItemOptions.Id,
						Title = ItemOptions.Title
					}
					
					Dropdown.Items[ItemOptions.Id] = Item
					
					Item.Container = Object.New("Frame", {
						Name = "Option",
						Parent = Dropdown.Container.Content,
						Active = true,
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						Selectable = true,
						Size = UDim2.new(1, 0, 0, 30),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						BackgroundTransparency = 1
					}, {
						Object.New("UIPadding", {
							Name = "Padding",
							PaddingLeft = UDim.new(0, 5)
						}),
						Object.New("TextLabel", {
							Name = "Title",
							TextTruncate = Enum.TextTruncate.AtEnd,
							BorderSizePixel = 0,
							TextXAlignment = Enum.TextXAlignment.Left,
							TextTransparency = 0.5,
							TextYAlignment = Enum.TextYAlignment.Top,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							TextSize = 13,
							FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
							TextColor3 = Theme.Default.Light,
							BackgroundTransparency = 1,
							RichText = true,
							AnchorPoint = Vector2.new(0, 0.5),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							Text = ItemOptions.Title,
							AutomaticSize = Enum.AutomaticSize.XY,
							Position = UDim2.new(0, 0, 0.5, 0)
						}),
						Object.New("TextLabel", {
							Name = "Mark",
							BorderSizePixel = 0,
							TextXAlignment = Enum.TextXAlignment.Left,
							TextYAlignment = Enum.TextYAlignment.Top,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							TextSize = 13,
							FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
							TextColor3 = Theme.Default.Light,
							BackgroundTransparency = 1,
							AnchorPoint = Vector2.new(1, 0.5),
							Size = UDim2.new(0, 12, 0, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							Text = "✓",
							LayoutOrder = 2,
							AutomaticSize = Enum.AutomaticSize.Y,
							Position = UDim2.new(1, 0, 0.5, 0),
							Visible = false
						})
					})
					
					local function Toggle(Bool, Callback)
						if not Options.MultiSelect and Item.Selected and Bool ~= false then
							return
						end

						if not Options.MultiSelect then
							Dropdown:SetSelected(Item.Id)
						else
							Item.Selected = Bool or not Item.Selected
							Item.Container.Mark.Visible = Item.Selected
							local SelectedTitles = {}
							for _, ExistingItem in pairs(Dropdown.Items) do
								if ExistingItem.Selected then
									table.insert(SelectedTitles, ExistingItem.Title)
								end
							end
							local DisplayText = #SelectedTitles > 0 and Options.Title .. " - " .. table.concat(SelectedTitles, ", ") or Options.Title .. " - None"
							Dropdown.Container.Title.Text = DisplayText
							Options.OnSelectionChanged(Dropdown:GetSelected())
						end
					end
					
					Input(Item.Container, {
						HoverOff = function()
							Tween({
								Item.Container.Title
							}, {
								{Goal = { TextTransparency = 0.5 }, Duration = 0.2}
							})
							
							Tween({
								Dropdown.Container.Title,
								Dropdown.Container.Icon,
							}, {
								{Goal = { TextTransparency = 0 }, Duration = 0.2},
								{Goal = { ImageTransparency = 0 }, Duration = 0.2}
							})
							
							Dropdown.CanClose = true
						end,
						HoverOn = function()
							Tween({
								Item.Container.Title
							}, {
								{Goal = { TextTransparency = 0 }, Duration = 0.2}
							})
							
							Tween({
								Dropdown.Container.Title,
								Dropdown.Container.Icon,
							}, {
								{Goal = { TextTransparency = 0.5 }, Duration = 0.2},
								{Goal = { ImageTransparency = 0.5 }, Duration = 0.2}
							})
							
							Dropdown.CanClose = false
						end,
						Click = function()
							Toggle()
							Dropdown.CanClose = false
							if Item.Selected then
								ItemOptions.Callback(Item.Id, ItemOptions.Title)
							end
						end,
					})
					
					if ItemOptions.Default then
						Toggle()
					end
					
					return Item
				end
				
				return Dropdown
			end
			
			-- Needs a redisign
			--[=[
			function Group:Colorpicker(Options)
				Options = Settings({
					Title = "",
					Default = Color3.fromRGB(255, 255, 255),
					Alpha = 100,
					Callback = function(Color, Alpha)
						print(Color, Alpha)
					end,
				}, Options)
				
				local Colorpicker = {
					NewValue = {Color = Options.Default, Alpha = Options.Alpha},
					OldValue = {}
				}
				
				-- Part 1
				Colorpicker.Container = Object.New("Frame", {
					Name = "Colorpicker",
					Parent = Group.Container,
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					AutomaticSize = Enum.AutomaticSize.Y,
					Size = UDim2.new(1, 0, 0, 29),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BackgroundTransparency = 1
				}, {
					Object.New("TextLabel", {
						Name = "Title",
						TextTruncate = Enum.TextTruncate.AtEnd,
						BorderSizePixel = 0,
						TextXAlignment = Enum.TextXAlignment.Left,
						TextTransparency = 0.5,
						TextYAlignment = Enum.TextYAlignment.Top,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						TextSize = 11,
						FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
						TextColor3 = Color3.fromRGB(255, 255, 255),
						BackgroundTransparency = 1,
						RichText = true,
						AnchorPoint = Vector2.new(0, 0.5),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Text = "Colorpicker",
						AutomaticSize = Enum.AutomaticSize.XY,
						Position = UDim2.new(0, 0, 0.5, 0)
					}),
					Object.New("ImageLabel", {
						Name = "NewColor",
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(255, 255, 255),
						ScaleType = Enum.ScaleType.Tile,
						AnchorPoint = Vector2.new(1, 0.5),
						Image = "rbxassetid://121484455191370",
						TileSize = UDim2.new(0, 500, 0, 500),
						Size = UDim2.new(0, 16, 0, 16),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						BackgroundTransparency = 1,
						Position = UDim2.new(1, 0, 0.5, 0)
					}, {
						Object.New("Frame", {
							Name = "Color",
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							AnchorPoint = Vector2.new(0.5, 0.5),
							Size = UDim2.new(1, 0, 1, 0),
							Position = UDim2.new(0.5, 0, 0.5, 0)
						}, {
							Object.New("UICorner", {
								CornerRadius = UDim.new(0, 6)
							})
						}),
						Object.New("UICorner", {
							CornerRadius = UDim.new(0, 6)
						})
					})
				})
				
				-- Part 2
				Colorpicker.Window = Object.New("Frame", {
					Parent = Window.Interface.Base,
					Visible = true,
					BorderSizePixel = 0,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					Size = UDim2.new(1, 0, 1, 0),
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BackgroundTransparency = 0.5,
					Name = "Colorpicker",
				}, {
					Object.New("Frame", {
						BorderSizePixel = 0,
						BackgroundColor3 = Color3.fromRGB(11, 11, 11),
						AnchorPoint = Vector2.new(0.5, 0.5),
						AutomaticSize = Enum.AutomaticSize.Y,
						Size = UDim2.new(0, 325, 0, 319),
						Position = UDim2.new(0.53823, 0, 0.5, 0),
						BorderColor3 = Color3.fromRGB(0, 0, 0),
						Name = "Main",
					}, {
						Object.New("UIScale", {
							Scale = 0.85,
							Name = "Scale",
						}),
						Object.New("UIStroke", {
							Transparency = 0.9,
							ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
							Color = Color3.fromRGB(255, 255, 255),
							Name = "Stroke",
						}),
						Object.New("UICorner", {
							CornerRadius = UDim.new(0, 10),
							Name = "Corner",
						}),
						Object.New("UIPadding", {
							PaddingTop = UDim.new(0, 20),
							PaddingRight = UDim.new(0, 20),
							PaddingLeft = UDim.new(0, 20),
							PaddingBottom = UDim.new(0, 20),
							Name = "Padding",
						}),
						Object.New("Frame", {
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(0, 0, 0),
							AutomaticSize = Enum.AutomaticSize.Y,
							Size = UDim2.new(1, 0, 0, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							BackgroundTransparency = 1,
							Name = "Information",
						}, {
							Object.New("TextLabel", {
								TextWrapped = true,
								BorderSizePixel = 0,
								TextTransparency = 0.4,
								TextYAlignment = Enum.TextYAlignment.Top,
								BackgroundColor3 = Color3.fromRGB(255, 255, 255),
								TextSize = 18,
								FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),
								TextColor3 = Color3.fromRGB(255, 255, 255),
								BackgroundTransparency = 1,
								RichText = true,
								Size = UDim2.new(1, 0, 0, 0),
								BorderColor3 = Color3.fromRGB(0, 0, 0),
								Text = "Color picker",
								AutomaticSize = Enum.AutomaticSize.XY,
								Name = "Title",
							}),
							Object.New("UIPadding", {
								PaddingBottom = UDim.new(0, 15),
								Name = "Padding",
							}),
							Object.New("Frame", {
								BorderSizePixel = 0,
								BackgroundColor3 = Color3.fromRGB(255, 255, 255),
								AnchorPoint = Vector2.new(0, 1),
								Size = UDim2.new(1, 0, 0, 1),
								Position = UDim2.new(0, 0, 1, 15),
								BorderColor3 = Color3.fromRGB(0, 0, 0),
								LayoutOrder = 1,
								BackgroundTransparency = 0.9,
								Name = "Line",
							})
						}),
						Object.New("UIListLayout", {
							HorizontalAlignment = Enum.HorizontalAlignment.Center,
							Padding = UDim.new(0, 10),
							SortOrder = Enum.SortOrder.LayoutOrder,
							Name = "List",
						}),
						Object.New("Frame", {
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(255, 255, 255),
							AutomaticSize = Enum.AutomaticSize.XY,
							Size = UDim2.new(1, 0, 0, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							LayoutOrder = 1,
							BackgroundTransparency = 1,
							Name = "Settings",
						}, {
							Object.New("TextButton", {
								BorderSizePixel = 0,
								AutoButtonColor = false,
								TextSize = 14,
								TextColor3 = Color3.fromRGB(0, 0, 0),
								BackgroundColor3 = Color3.fromRGB(0, 255, 255),
								FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
								Size = UDim2.new(1, 0, 0, 11),
								LayoutOrder = 1,
								BorderColor3 = Color3.fromRGB(0, 0, 0),
								Text = "",
								Position = UDim2.new(0.092, 0, 0.886, 0),
								Name = "DarknessSlider",
							}, {
								Object.New("UIGradient", {
									Color = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))},
									Name = "be",
								}),
								Object.New("UICorner", {
									CornerRadius = UDim.new(0, 6),
									Name = "bf",
								}),
								Object.New("UIStroke", {
									Transparency = 0.9,
									ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
									Color = Color3.fromRGB(255, 255, 255),
									Name = "c0",
								}, {
									Object.New("UIGradient", {
										Rotation = 180,
										Color = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))},
										Name = "c1",
									})
								})
							}),
							Object.New("UIListLayout", {
								Padding = UDim.new(0, 25),
								SortOrder = Enum.SortOrder.LayoutOrder,
								Name = "c2",
							}),
							Object.New("Frame", {
								BorderSizePixel = 0,
								BackgroundColor3 = Color3.fromRGB(255, 255, 255),
								AutomaticSize = Enum.AutomaticSize.Y,
								Size = UDim2.new(1, 0, 0, 100),
								BorderColor3 = Color3.fromRGB(0, 0, 0),
								BackgroundTransparency = 1,
								Name = "Wheel",
							}, {
								Object.New("ImageButton", {
									Active = false,
									SizeConstraint = Enum.SizeConstraint.RelativeYY,
									AutoButtonColor = false,
									BackgroundColor3 = Color3.fromRGB(249, 249, 249),
									Selectable = false,
									Image = "rbxassetid://2849458409",
									Size = UDim2.new(0, 169, 0, 169),
									BackgroundTransparency = 1,
									Name = "Wheel",
								}, {
									Object.New("ImageLabel", {
										SizeConstraint = Enum.SizeConstraint.RelativeYY,
										BackgroundColor3 = Color3.fromRGB(255, 255, 255),
										ImageColor3 = Color3.fromRGB(0, 0, 0),
										AnchorPoint = Vector2.new(0.5, 0.5),
										Image = "rbxassetid://73265255323268",
										Size = UDim2.new(0, 22, 0, 22),
										BackgroundTransparency = 1,
										Position = UDim2.new(0.5, 110, 0.5, 0),
										Name = "Target",
									})
								}),
								Object.New("Frame", {
									BorderSizePixel = 0,
									BackgroundColor3 = Color3.fromRGB(255, 255, 255),
									AnchorPoint = Vector2.new(1, 0.5),
									AutomaticSize = Enum.AutomaticSize.XY,
									Position = UDim2.new(1, 0, 0.5, 0),
									BorderColor3 = Color3.fromRGB(0, 0, 0),
									LayoutOrder = 1,
									BackgroundTransparency = 1,
									Name = "Inputs",
								}, {
									Object.New("UIListLayout", {
										Padding = UDim.new(0, 5),
										SortOrder = Enum.SortOrder.LayoutOrder,
										Name = "c7",
									}),
									Object.New("Frame", {
										BorderSizePixel = 0,
										BackgroundColor3 = Color3.fromRGB(0, 0, 0),
										AutomaticSize = Enum.AutomaticSize.XY,
										Size = UDim2.new(0, 0, 0, 38),
										BorderColor3 = Color3.fromRGB(0, 0, 0),
										LayoutOrder = 1,
										BackgroundTransparency = 1,
										Name = "Red",
									}, {
										Object.New("TextLabel", {
											TextTruncate = Enum.TextTruncate.AtEnd,
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.5,
											TextYAlignment = Enum.TextYAlignment.Top,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											TextSize = 10,
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BackgroundTransparency = 1,
											AnchorPoint = Vector2.new(0, 0.5),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "Red",
											LayoutOrder = 2,
											AutomaticSize = Enum.AutomaticSize.XY,
											Position = UDim2.new(0, 0, 0.5, 0),
											Name = "InputName",
										}),
										Object.New("UIListLayout", {
											Padding = UDim.new(0, 15),
											VerticalAlignment = Enum.VerticalAlignment.Center,
											SortOrder = Enum.SortOrder.LayoutOrder,
											FillDirection = Enum.FillDirection.Horizontal,
											Name = "ca",
										}),
										Object.New("TextBox", {
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.4,
											TextSize = 12,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											AnchorPoint = Vector2.new(1, 0.5),
											ClearTextOnFocus = false,
											ClipsDescendants = true,
											Size = UDim2.new(0, 57, 0, 19),
											Position = UDim2.new(1, 0, 0.5, 0),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "0",
											LayoutOrder = 1,
											BackgroundTransparency = 0.95,
											Name = "InputBox",
										}, {
											Object.New("UICorner", {
												CornerRadius = UDim.new(0, 4),
												Name = "InputBoxUICorner",
											}),
											Object.New("UIStroke", {
												Transparency = 0.9,
												ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
												Color = Color3.fromRGB(255, 255, 255),
												Name = "InputBoxUIStroke",
											}),
											Object.New("UISizeConstraint", {
												Name = "InputBoxUISizeConstraint",
											}),
											Object.New("UIPadding", {
												PaddingRight = UDim.new(0, 10),
												PaddingLeft = UDim.new(0, 8),
												Name = "InputBoxUIPadding",
											})
										})
									}),
									Object.New("Frame", {
										BorderSizePixel = 0,
										BackgroundColor3 = Color3.fromRGB(0, 0, 0),
										AutomaticSize = Enum.AutomaticSize.XY,
										Size = UDim2.new(0, 0, 0, 38),
										BorderColor3 = Color3.fromRGB(0, 0, 0),
										LayoutOrder = 2,
										BackgroundTransparency = 1,
										Name = "Green",
									}, {
										Object.New("TextLabel", {
											TextTruncate = Enum.TextTruncate.AtEnd,
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.5,
											TextYAlignment = Enum.TextYAlignment.Top,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											TextSize = 10,
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BackgroundTransparency = 1,
											AnchorPoint = Vector2.new(0, 0.5),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "Green",
											LayoutOrder = 2,
											AutomaticSize = Enum.AutomaticSize.XY,
											Position = UDim2.new(0, 0, 0.5, 0),
											Name = "InputName",
										}),
										Object.New("UIListLayout", {
											Padding = UDim.new(0, 15),
											VerticalAlignment = Enum.VerticalAlignment.Center,
											SortOrder = Enum.SortOrder.LayoutOrder,
											FillDirection = Enum.FillDirection.Horizontal,
											Name = "d2",
										}),
										Object.New("TextBox", {
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.4,
											TextSize = 12,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											AnchorPoint = Vector2.new(1, 0.5),
											ClearTextOnFocus = false,
											ClipsDescendants = true,
											Size = UDim2.new(0, 57, 0, 19),
											Position = UDim2.new(1, 0, 0.5, 0),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "255",
											LayoutOrder = 1,
											BackgroundTransparency = 0.95,
											Name = "InputBox",
										}, {
											Object.New("UICorner", {
												CornerRadius = UDim.new(0, 4),
												Name = "InputBoxUICorner",
											}),
											Object.New("UIStroke", {
												Transparency = 0.9,
												ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
												Color = Color3.fromRGB(255, 255, 255),
												Name = "InputBoxUIStroke",
											}),
											Object.New("UISizeConstraint", {
												Name = "InputBoxUISizeConstraint",
											}),
											Object.New("UIPadding", {
												PaddingRight = UDim.new(0, 10),
												PaddingLeft = UDim.new(0, 8),
												Name = "InputBoxUIPadding",
											})
										})
									}),
									Object.New("Frame", {
										BorderSizePixel = 0,
										BackgroundColor3 = Color3.fromRGB(0, 0, 0),
										AutomaticSize = Enum.AutomaticSize.XY,
										Size = UDim2.new(0, 0, 0, 38),
										BorderColor3 = Color3.fromRGB(0, 0, 0),
										LayoutOrder = 3,
										BackgroundTransparency = 1,
										Name = "Blue",
									}, {
										Object.New("TextLabel", {
											TextTruncate = Enum.TextTruncate.AtEnd,
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.5,
											TextYAlignment = Enum.TextYAlignment.Top,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											TextSize = 10,
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BackgroundTransparency = 1,
											AnchorPoint = Vector2.new(0, 0.5),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "Blue",
											LayoutOrder = 2,
											AutomaticSize = Enum.AutomaticSize.XY,
											Position = UDim2.new(0, 0, 0.5, 0),
											Name = "InputName",
										}),
										Object.New("UIListLayout", {
											Padding = UDim.new(0, 15),
											VerticalAlignment = Enum.VerticalAlignment.Center,
											SortOrder = Enum.SortOrder.LayoutOrder,
											FillDirection = Enum.FillDirection.Horizontal,
											Name = "da",
										}),
										Object.New("TextBox", {
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.4,
											TextSize = 12,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											AnchorPoint = Vector2.new(1, 0.5),
											ClearTextOnFocus = false,
											ClipsDescendants = true,
											Size = UDim2.new(0, 57, 0, 19),
											Position = UDim2.new(1, 0, 0.5, 0),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "255",
											LayoutOrder = 1,
											BackgroundTransparency = 0.95,
											Name = "InputBox",
										}, {
											Object.New("UICorner", {
												CornerRadius = UDim.new(0, 4),
												Name = "InputBoxUICorner",
											}),
											Object.New("UIStroke", {
												Transparency = 0.9,
												ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
												Color = Color3.fromRGB(255, 255, 255),
												Name = "InputBoxUIStroke",
											}),
											Object.New("UISizeConstraint", {
												Name = "InputBoxUISizeConstraint",
											}),
											Object.New("UIPadding", {
												PaddingRight = UDim.new(0, 10),
												PaddingLeft = UDim.new(0, 8),
												Name = "InputBoxUIPadding",
											})
										})
									}),
									Object.New("Frame", {
										Visible = false,
										BorderSizePixel = 0,
										BackgroundColor3 = Color3.fromRGB(0, 0, 0),
										AutomaticSize = Enum.AutomaticSize.XY,
										Size = UDim2.new(0, 0, 0, 38),
										BorderColor3 = Color3.fromRGB(0, 0, 0),
										LayoutOrder = 4,
										BackgroundTransparency = 1,
										Name = "Alpha",
									}, {
										Object.New("TextLabel", {
											TextTruncate = Enum.TextTruncate.AtEnd,
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.5,
											TextYAlignment = Enum.TextYAlignment.Top,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											TextSize = 13,
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BackgroundTransparency = 1,
											AnchorPoint = Vector2.new(0, 0.5),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "Alpha",
											LayoutOrder = 2,
											AutomaticSize = Enum.AutomaticSize.XY,
											Position = UDim2.new(0, 0, 0.5, 0),
											Name = "InputName",
										}),
										Object.New("UIListLayout", {
											Padding = UDim.new(0, 15),
											VerticalAlignment = Enum.VerticalAlignment.Center,
											SortOrder = Enum.SortOrder.LayoutOrder,
											FillDirection = Enum.FillDirection.Horizontal,
											Name = "e2",
										}),
										Object.New("TextBox", {
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.4,
											TextSize = 12,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											AnchorPoint = Vector2.new(1, 0.5),
											ClearTextOnFocus = false,
											ClipsDescendants = true,
											Size = UDim2.new(0, 75, 0, 25),
											Position = UDim2.new(1, 0, 0.5, 0),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "0",
											LayoutOrder = 1,
											BackgroundTransparency = 0.95,
											Name = "InputBox",
										}, {
											Object.New("UICorner", {
												CornerRadius = UDim.new(0, 4),
												Name = "InputBoxUICorner",
											}),
											Object.New("UIStroke", {
												Transparency = 0.9,
												ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
												Color = Color3.fromRGB(255, 255, 255),
												Name = "InputBoxUIStroke",
											}),
											Object.New("UISizeConstraint", {
												Name = "InputBoxUISizeConstraint",
											}),
											Object.New("UIPadding", {
												PaddingRight = UDim.new(0, 10),
												PaddingLeft = UDim.new(0, 8),
												Name = "InputBoxUIPadding",
											})
										})
									}),
									Object.New("Frame", {
										BorderSizePixel = 0,
										BackgroundColor3 = Color3.fromRGB(0, 0, 0),
										AutomaticSize = Enum.AutomaticSize.XY,
										Size = UDim2.new(0, 0, 0, 38),
										BorderColor3 = Color3.fromRGB(0, 0, 0),
										BackgroundTransparency = 1,
										Name = "Hex",
									}, {
										Object.New("TextLabel", {
											TextTruncate = Enum.TextTruncate.AtEnd,
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.5,
											TextYAlignment = Enum.TextYAlignment.Top,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											TextSize = 10,
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BackgroundTransparency = 1,
											AnchorPoint = Vector2.new(0, 0.5),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "Alpha",
											LayoutOrder = 2,
											AutomaticSize = Enum.AutomaticSize.XY,
											Position = UDim2.new(0, 0, 0.5, 0),
											Name = "InputName",
										}),
										Object.New("UIListLayout", {
											Padding = UDim.new(0, 15),
											VerticalAlignment = Enum.VerticalAlignment.Center,
											SortOrder = Enum.SortOrder.LayoutOrder,
											FillDirection = Enum.FillDirection.Horizontal,
											Name = "ea",
										}),
										Object.New("TextBox", {
											TextColor3 = Color3.fromRGB(255, 255, 255),
											BorderSizePixel = 0,
											TextXAlignment = Enum.TextXAlignment.Left,
											TextTransparency = 0.4,
											TextSize = 12,
											BackgroundColor3 = Color3.fromRGB(255, 255, 255),
											FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
											AnchorPoint = Vector2.new(1, 0.5),
											ClearTextOnFocus = false,
											ClipsDescendants = true,
											Size = UDim2.new(0, 57, 0, 19),
											Position = UDim2.new(1, 0, 0.5, 0),
											BorderColor3 = Color3.fromRGB(0, 0, 0),
											Text = "100",
											LayoutOrder = 1,
											BackgroundTransparency = 0.95,
											Name = "InputBox",
										}, {
											Object.New("UICorner", {
												CornerRadius = UDim.new(0, 4),
												Name = "InputBoxUICorner",
											}),
											Object.New("UIStroke", {
												Transparency = 0.9,
												ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
												Color = Color3.fromRGB(255, 255, 255),
												Name = "InputBoxUIStroke",
											}),
											Object.New("UISizeConstraint", {
												Name = "InputBoxUISizeConstraint",
											}),
											Object.New("UIPadding", {
												PaddingRight = UDim.new(0, 10),
												PaddingLeft = UDim.new(0, 8),
												Name = "InputBoxUIPadding",
											})
										})
									})
								}),
								Object.New("UIPadding", {
									PaddingRight = UDim.new(0, 5),
									Name = "f0",
								})
							}),
							Object.New("ImageLabel", {
								BorderSizePixel = 0,
								BackgroundColor3 = Color3.fromRGB(255, 255, 255),
								ScaleType = Enum.ScaleType.Tile,
								Image = "rbxassetid://121484455191370",
								TileSize = UDim2.new(0, 500, 0, 500),
								Size = UDim2.new(1, 0, 0, 11),
								BorderColor3 = Color3.fromRGB(0, 0, 0),
								BackgroundTransparency = 1,
								Name = "TransparencySlider",
							}, {
								Object.New("UICorner", {
									CornerRadius = UDim.new(0, 6),
									Name = "f2",
								}),
								Object.New("TextButton", {
									BorderSizePixel = 0,
									AutoButtonColor = false,
									TextSize = 14,
									TextColor3 = Color3.fromRGB(0, 0, 0),
									BackgroundColor3 = Color3.fromRGB(0, 255, 255),
									FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
									Size = UDim2.new(1, 0, 0, 11),
									LayoutOrder = 1,
									BorderColor3 = Color3.fromRGB(0, 0, 0),
									Text = "",
									Name = "Value",
								}, {
									Object.New("UIGradient", {
										Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 1)},
										Color = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))},
										Name = "f4",
									}),
									Object.New("UICorner", {
										CornerRadius = UDim.new(0, 6),
										Name = "f5",
									}),
									Object.New("UIStroke", {
										Transparency = 0.9,
										ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
										Color = Color3.fromRGB(255, 255, 255),
										Name = "f6",
									}, {
										Object.New("UIGradient", {
											Rotation = 180,
											Color = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))},
											Name = "f7",
										})
									})
								})
							})
						}),
						Object.New("Frame", {
							BorderSizePixel = 0,
							BackgroundColor3 = Color3.fromRGB(0, 0, 0),
							AutomaticSize = Enum.AutomaticSize.Y,
							Size = UDim2.new(1, 0, 0, 0),
							BorderColor3 = Color3.fromRGB(0, 0, 0),
							LayoutOrder = 2,
							BackgroundTransparency = 1,
							Name = "Actions",
						}, {
							Object.New("UIListLayout", {
								Padding = UDim.new(0, 20),
								SortOrder = Enum.SortOrder.LayoutOrder,
								FillDirection = Enum.FillDirection.Horizontal,
								Name = "ListLayout",
							}),
							Object.New("UIPadding", {
								PaddingTop = UDim.new(0, 10),
								Name = "Padding",
							}),
							Object.New("TextLabel", {
								Active = true,
								TextTruncate = Enum.TextTruncate.AtEnd,
								BorderSizePixel = 0,
								TextTransparency = 0.5,
								BackgroundColor3 = Color3.fromRGB(26, 26, 26),
								TextSize = 15,
								FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),
								TextColor3 = Color3.fromRGB(255, 255, 255),
								Size = UDim2.new(0.5, -10, 0, 0),
								BorderColor3 = Color3.fromRGB(0, 0, 0),
								Text = "Confirm",
								Selectable = true,
								AutomaticSize = Enum.AutomaticSize.Y,
								Name = "Confirm",
							}, {
								Object.New("UIPadding", {
									PaddingTop = UDim.new(0, 9),
									PaddingRight = UDim.new(0, 10),
									PaddingLeft = UDim.new(0, 10),
									PaddingBottom = UDim.new(0, 9),
									Name = "Padding",
								}),
								Object.New("UICorner", {
									CornerRadius = UDim.new(0, 10),
									Name = "Corner",
								})
							}),
							Object.New("TextLabel", {
								Active = true,
								TextTruncate = Enum.TextTruncate.AtEnd,
								BorderSizePixel = 0,
								TextTransparency = 0.5,
								BackgroundColor3 = Color3.fromRGB(26, 26, 26),
								TextSize = 15,
								FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),
								TextColor3 = Color3.fromRGB(255, 255, 255),
								Size = UDim2.new(0.5, -10, 0, 0),
								BorderColor3 = Color3.fromRGB(0, 0, 0),
								Text = "Cancel",
								Selectable = true,
								AutomaticSize = Enum.AutomaticSize.Y,
								Name = "Cancel",
							}, {
								Object.New("UICorner", {
									CornerRadius = UDim.new(0, 10),
									Name = "Corner",
								}),
								Object.New("UIPadding", {
									PaddingTop = UDim.new(0, 9),
									PaddingRight = UDim.new(0, 10),
									PaddingLeft = UDim.new(0, 10),
									PaddingBottom = UDim.new(0, 9),
									Name = "Padding",
								})
							})
						})
					}),
					Object.New("UICorner", {
						CornerRadius = UDim.new(0, 6),
						Name = "Corner",
					})
				})
				
				Input(Colorpicker.Container, {
					HoverOff = function()
						Tween({
							Colorpicker.Container.Title
						}, {
							{Goal = { TextTransparency = 0.5 }, Duration = 0.2}
						})
					end,
					HoverOn = function()
						Tween({
							Colorpicker.Container.Title
						}, {
							{Goal = { TextTransparency = 0 }, Duration = 0.2}
						})
					end,
					Click = function()
						Colorpicker.Window.Visible = true
					end,
				})
				
				local function CalculateRGB(HSV)
					local H, S, V = HSV[1], HSV[2], HSV[3]
					local chroma = V * S
					local xValue = chroma * (1 - math.abs((H / 60) % 2 - 1))
					local matchValue = V - chroma

					local r, g, b
					if H >= 0 and H < 60 then
						r, g, b = chroma, xValue, 0
					elseif H >= 60 and H < 120 then
						r, g, b = xValue, chroma, 0
					elseif H >= 120 and H < 180 then
						r, g, b = 0, chroma, xValue
					elseif H >= 180 and H < 240 then
						r, g, b = 0, xValue, chroma
					elseif H >= 240 and H < 300 then
						r, g, b = xValue, 0, chroma
					elseif H >= 300 and H < 360 then
						r, g, b = chroma, 0, xValue
					end

					return Color3.new(r + matchValue, g + matchValue, b + matchValue)
				end

				local function Update(target, input)
					if target == Colorpicker.Window.Main.Settings.Wheel.Wheel then
						local mousePos = Vector2.new(input.Position.X, input.Position.Y)
						local wheelSize = Colorpicker.Window.Main.Settings.Wheel.Wheel.AbsoluteSize
						local wheelPos = Colorpicker.Window.Main.Settings.Wheel.Wheel.AbsolutePosition
						local wheelCenter = Vector2.new(wheelPos.X + wheelSize.X / 2, wheelPos.Y + wheelSize.Y / 2)
						local direction = (mousePos - wheelCenter).Unit
						local angleInRadians = math.atan2(direction.Y, direction.X)
						local hue = (math.deg(angleInRadians) + 90 + 360) % 360

						local saturation
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							local distance = math.clamp((mousePos - wheelCenter).Magnitude, 0, wheelSize.X / 2)
							saturation = distance / (wheelSize.X / 2)
						elseif input.UserInputType == Enum.UserInputType.Touch then
							saturation = 1
						else
							return
						end

						local color = CalculateRGB({hue, saturation, 1})
						Colorpicker.NewValue.Color = color
						Colorpicker.Window.Main.Settings.TransparencySlider.Value.BackgroundColor3 = color
						Colorpicker.Container.NewColor.Color.BackgroundColor3 = color

						Colorpicker.Window.Main.Settings.Wheel.Inputs.Red.InputBox.Text = math.floor(color.R * 255 + 0.5)
						Colorpicker.Window.Main.Settings.Wheel.Inputs.Green.InputBox.Text = math.floor(color.G * 255 + 0.5)
						Colorpicker.Window.Main.Settings.Wheel.Inputs.Blue.InputBox.Text = math.floor(color.B * 255 + 0.5)

					elseif target == Colorpicker.Window.Main.Settings.DarknessSlider then
						local sliderSize = target.AbsoluteSize.X
						local sliderPos = target.AbsolutePosition.X
						local mouseX = input.Position.X
						local darkness = math.clamp((mouseX - sliderPos) / sliderSize, 0, 1) -- Left is light, right is dark
						local blendedColor = Colorpicker.NewValue.Color:Lerp(Color3.new(0, 0, 0), darkness) -- Fully darkened at 1, lightest at 0
						Colorpicker:SetColor(blendedColor, Colorpicker.NewValue.Alpha)

					elseif target == Colorpicker.Window.Main.Settings.TransparencySlider then
						local sliderSize = target.AbsoluteSize.X
						local sliderPos = target.AbsolutePosition.X
						local mouseX = input.Position.X
						local alpha = math.clamp((mouseX - sliderPos) / sliderSize, 0, 1) * 100 -- Left is transparent, right is opaque
						Colorpicker.Window.Main.Settings.Wheel.Inputs.Hex.InputBox.Text = math.floor(alpha + 0.5)
						Colorpicker:SetColor(Colorpicker.NewValue.Color, alpha / 100)

					elseif target == Colorpicker.Window.Main.Settings.Wheel.Inputs.Red.InputBox or
						target == Colorpicker.Window.Main.Settings.Wheel.Inputs.Green.InputBox or
						target == Colorpicker.Window.Main.Settings.Wheel.Inputs.Blue.InputBox or
						target == Colorpicker.Window.Main.Settings.Wheel.Inputs.Hex.InputBox then

						local r = tonumber(Colorpicker.Window.Main.Settings.Wheel.Inputs.Red.InputBox.Text) or 0
						local g = tonumber(Colorpicker.Window.Main.Settings.Wheel.Inputs.Green.InputBox.Text) or 0
						local b = tonumber(Colorpicker.Window.Main.Settings.Wheel.Inputs.Blue.InputBox.Text) or 0
						local alpha = tonumber(Colorpicker.Window.Main.Settings.Wheel.Inputs.Hex.InputBox.Text) or 100

						r = math.clamp(r, 0, 255)
						g = math.clamp(g, 0, 255)
						b = math.clamp(b, 0, 255)
						alpha = math.clamp(alpha, 0, 100)

						Colorpicker.Window.Main.Settings.Wheel.Inputs.Red.InputBox.Text = r
						Colorpicker.Window.Main.Settings.Wheel.Inputs.Green.InputBox.Text = g
						Colorpicker.Window.Main.Settings.Wheel.Inputs.Blue.InputBox.Text = b
						Colorpicker.Window.Main.Settings.Wheel.Inputs.Hex.InputBox.Text = alpha

						Colorpicker:SetColor(Color3.fromRGB(r, g, b), alpha / 100)
					end
				end

				function Colorpicker:SetColor(color, alpha)
					Colorpicker.NewValue.Color = color or Colorpicker.NewValue.Color
					Colorpicker.NewValue.Alpha = alpha or Colorpicker.NewValue.Alpha

					Colorpicker.Container.NewColor.Color.BackgroundColor3 = Colorpicker.NewValue.Color:Lerp(Color3.new(1, 1, 1), 1 - Colorpicker.NewValue.Alpha)
					Colorpicker.Container.NewColor.Color.BackgroundTransparency = 1 - Colorpicker.NewValue.Alpha
					Colorpicker.Window.Main.Settings.TransparencySlider.Value.BackgroundColor3 = Colorpicker.NewValue.Color:Lerp(Color3.new(1, 1, 1), 1 - Colorpicker.NewValue.Alpha)
					Colorpicker.Window.Main.Settings.TransparencySlider.Value.BackgroundTransparency = 1 - Colorpicker.NewValue.Alpha

					local r = math.floor(Colorpicker.NewValue.Color.R * 255 + 0.5)
					local g = math.floor(Colorpicker.NewValue.Color.G * 255 + 0.5)
					local b = math.floor(Colorpicker.NewValue.Color.B * 255 + 0.5)
					local hexAlpha = math.floor(Colorpicker.NewValue.Alpha * 100 + 0.5)

					Colorpicker.Window.Main.Settings.Wheel.Inputs.Red.InputBox.Text = r
					Colorpicker.Window.Main.Settings.Wheel.Inputs.Green.InputBox.Text = g
					Colorpicker.Window.Main.Settings.Wheel.Inputs.Blue.InputBox.Text = b
					Colorpicker.Window.Main.Settings.Wheel.Inputs.Hex.InputBox.Text = hexAlpha
				end

				local function ShowColorPicker()
					Colorpicker.OldValue = {Color = Colorpicker.NewValue.Color, Alpha = Colorpicker.NewValue.Alpha}
					Colorpicker.Window.Visible = true
				end

				-- Event Handlers
				Input(Colorpicker.Window.Main.Settings.Wheel.Wheel, {
					Dragging = function(Input)
						Update(Colorpicker.Window.Main.Settings.Wheel.Wheel, Input)
					end
				})

				Input(Colorpicker.Window.Main.Settings.DarknessSlider, {
					Dragging = function(Input)
						Update(Colorpicker.Window.Main.Settings.DarknessSlider, Input)
					end
				})

				Input(Colorpicker.Window.Main.Settings.TransparencySlider, {
					Dragging = function(Input)
						Update(Colorpicker.Window.Main.Settings.TransparencySlider, Input)
					end
				})

				Input(Colorpicker.Container, {
					Click = ShowColorPicker
				})

				Input(Colorpicker.Window.Main.Actions.Cancel, {
					Click = function()
						Colorpicker:SetColor(Colorpicker.OldValue.Color, Colorpicker.OldValue.Alpha)
						Colorpicker.Window.Visible = false
					end
				})

				Input(Colorpicker.Window.Main.Actions.Confirm, {
					Click = function()
						Options.Callback(Colorpicker.NewValue.Color, Colorpicker.NewValue.Alpha)
						Colorpicker.Window.Visible = false
					end
				})

				Colorpicker.Window.Main.Settings.Wheel.Inputs.Red.InputBox.FocusLost:Connect(function() Update(Colorpicker.Window.Main.Settings.Wheel.Inputs.Red.InputBox) end)
				Colorpicker.Window.Main.Settings.Wheel.Inputs.Green.InputBox.FocusLost:Connect(function() Update(Colorpicker.Window.Main.Settings.Wheel.Inputs.Green.InputBox) end)
				Colorpicker.Window.Main.Settings.Wheel.Inputs.Blue.InputBox.FocusLost:Connect(function() Update(Colorpicker.Window.Main.Settings.Wheel.Inputs.Blue.InputBox) end)
				Colorpicker.Window.Main.Settings.Wheel.Inputs.Hex.InputBox.FocusLost:Connect(function() Update(Colorpicker.Window.Main.Settings.Wheel.Inputs.Hex.InputBox) end)

				Colorpicker:SetColor(Options.Default, Options.Alpha)
				
				return Colorpicker
			end
			]=]--
			
			return Group
		end
		
		return Tab
	end
	
	return Window
end

function Rise:Demo()

	local Window = Rise:Window({
		Title = "Tekkit",
		SubTitle = "Tekkit | UI TESTING"
	})

	local StatWindow = Window:StatWindow()

	StatWindow:Toggle(true)

	StatWindow:Stat()

	local Tab = Window:Tab()

	local GroupLeft = Tab:Group({
		Title = "Left one",
		Side = "Left"
	})

	GroupLeft:Button()

	GroupLeft:Toggle()

	GroupLeft:Slider()

	GroupLeft:Inputbox()

	GroupLeft:Keybind()

	--GroupLeft:Colorpicker()

	local Dropdown = GroupLeft:Dropdown()

	Dropdown:AddItem({
		Title = "Default Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(15, 15, 15))
			SetTheme("Light", Color3.fromRGB(255, 255, 255))
			Window:Notify()
		end,
		Default = true
	})

	Dropdown:AddItem({
		Title = "Light Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(240, 240, 240))
			SetTheme("Light", Color3.fromRGB(0, 0, 0))
		end,
	})

	Dropdown:AddItem({
		Title = "Brown Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(62, 39, 35))
			SetTheme("Light", Color3.fromRGB(199, 172, 162))
		end,
	})

	Dropdown:AddItem({
		Title = "Github Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(36, 41, 46))
			SetTheme("Light", Color3.fromRGB(246, 248, 250))
		end,
	})

	Dropdown:AddItem({
		Title = "Spotify Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(25, 20, 20))
			SetTheme("Light", Color3.fromRGB(30, 215, 96))
		end,
	})

	Dropdown:AddItem({
		Title = "Discord Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(54, 57, 63))
			SetTheme("Light", Color3.fromRGB(114, 137, 218))
		end,
	})

	Dropdown:AddItem({
		Title = "Youtube Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(28, 28, 28)) -- Youtube's dark theme
			SetTheme("Light", Color3.fromRGB(255, 255, 255))
		end,
	})

	Dropdown:AddItem({
		Title = "Roblox Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(50, 50, 50))
			SetTheme("Light", Color3.fromRGB(240, 240, 240))
		end,
	})

	Dropdown:AddItem({
		Title = "Windows 11 Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(32, 33, 36))
			SetTheme("Light", Color3.fromRGB(243, 243, 243))
		end,
	})

	Dropdown:AddItem({
		Title = "Terminal Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(0, 0, 0))
			SetTheme("Light", Color3.fromRGB(0, 255, 0))
		end,
	})

	Dropdown:AddItem({
		Title = "Amoled Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(0, 0, 0))
			SetTheme("Light", Color3.fromRGB(255, 255, 255))
		end,
	})

	Dropdown:AddItem({
		Title = "Darker Dark Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(10, 10, 10))
			SetTheme("Light", Color3.fromRGB(220, 220, 220))
		end,
	})

	Dropdown:AddItem({
		Title = "Midnight Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(25, 25, 50)) -- Smooth blueish purple
			SetTheme("Light", Color3.fromRGB(75, 75, 100))
		end,
	})

	Dropdown:AddItem({
		Title = "Bluloco Dark Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(38, 50, 56)) -- Dark blue-gray
			SetTheme("Light", Color3.fromRGB(144, 202, 249)) -- Sky blue accents
		end,
	})

	Dropdown:AddItem({
		Title = "Shades of Purple Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(48, 10, 36)) -- Deep purple
			SetTheme("Light", Color3.fromRGB(179, 136, 255)) -- Light purple accents
		end,
	})

	Dropdown:AddItem({
		Title = "Coffee Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(44, 32, 27)) -- Rich coffee brown
			SetTheme("Light", Color3.fromRGB(181, 136, 99)) -- Light latte brown
		end,
	})

	Dropdown:AddItem({
		Title = "Metallic Chic Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(33, 33, 33)) -- Sleek dark gray
			SetTheme("Light", Color3.fromRGB(192, 192, 192)) -- Metallic silver
		end,
	})

	Dropdown:AddItem({
		Title = "Deep Vintage Mood Theme",
		Callback = function()
			SetTheme("Dark", Color3.fromRGB(67, 54, 48)) -- Deep vintage brown
			SetTheme("Light", Color3.fromRGB(214, 200, 187)) -- Muted vintage cream
		end,
	})

	local GroupRight = Tab:Group({
		Title = "Right one",
		Side = "Right"
	})

	local GroupRightAgain = Tab:Group({
		Title = "Right one Again...",
		Side = "Right"
	})

	local Dropdown = GroupRightAgain:Dropdown({
		Title = "MultiSelect!!",
		MultiSelect = true
	})

	Dropdown:AddItem({

	})

	Dropdown:AddItem({

	})

	Dropdown:AddItem({

	})

	Dropdown:AddItem({

	})

	Dropdown:AddItem({

	})

	Dropdown:AddItem({

	})

	Tab:Set(true)
end

return Rise
